%!TEX root = /Users/gs/projects/rforge/sintro/pkg/sprof/work/vignettes/sprofiling.tex
% -*- mode: noweb; noweb-default-code-mode: R-mode; -*-
%#$HeadURL$
%#$Id$
%#$Date$
%#$Author$
%#$Revision$

\listfiles

% options(width=72); setwd("/Users/gs/projects/rforge/sintro/pkg/sprof/work/vignettes/" )
% Sweave(file= "../../vignettes/sprofiling.Rnw", output="sprofiling.tex", keep.source=TRUE)
% debug=TRUE, eps=FALSE, pdf=TRUE, keep.source=TRUE
%
%global flags for conditional builds
%:flags
\def\private{true}% comment out for public version
\def\solutions{true}% comment out to hide solutions
\def\usehyperref{true}% comment out to skip hyperref

\documentclass[utf8]{amsart}
\usepackage[utf8]{inputenc}
%\usepackage[applemac]{inputenc}
\usepackage[english]{babel} %ngerman
\usepackage{svninfo}
\RequirePackage{layouts}

%\usepackage[makeindex]{splitidx}
%\newindex[R functions by topic]{rtop}
%\newindex[R functions]{rfun}
\usepackage{fancyref}
\usepackage{cleveref}

\usepackage{gssda} %! add code, codearg, 
\usepackage{SIntro}
\usepackage{url} %! bubble up to gssda
\setkeys{Gin}{width=1.0\textwidth}

\setcounter{tocdepth}{3}
\setlength{\parskip}{6pt}
\setlength{\parindent}{0pt}

\newcommand{\R}{{\normalfont\textsf{R}}{}}
\newcommand\ircode[1]{\textsl{\texttt{#1}}}
\newcommand\ircodex[1]{\textsl{\texttt{#1}}\index{#1@\texttt{#1}|textit}}
%??2
%\newcommand{\keyword}[2]{\index[rtop]{\ Topic{\large\ \textbf{#1}}!#2@\texttt{#2}}}
\newcommand{\keyword}[2]{\index{\ Topic{\large\ \textbf{#1}}!#2@\texttt{#2}}}
%\newcommand\irfunx[2]{\keyword{#1}{#2}\ircode{#2()}\index[rfun]{#2@\texttt{#2}|textit}}% fun() & index, like \Link
\newcommand\irfunx[2]{\keyword{#1}{#2}\ircode{#2()}\index{#2@\texttt{#2}|textit}}

%	\newcommand{\keyword}[2]{\sindex[rtop]{\ Topic{\large\ \textbf{#1}}!#2@\texttt{#2}}}
%	\newcommand\irfunx[2]{\keyword{#1}{#2}\ircode{#2()}\sindex[rfun]{#2@\texttt{#2}|textit}}% fun() & index, like \Link
%	\newcommand\ircodex[1]{\textsl{\texttt{#1}}\sindex{#1@\texttt{#1}|textit}}
% \newcommand\ircodex[1]{\textsl{\texttt{#1}}\sindex{#1@\texttt{#1}|textit}}

%??1
\newcommand\irarg[1]{\small{$\langle$\verb+#1+$\rangle$}}% should be 
%??3

\title{R profiling and optimisation}
\author{G\"unther Sawitzki}

\address{\noindent G\"unther Sawitzki\newline
\indent StatLab Heidelberg\newline
\indent Im Neuenheimer Feld 294\newline
\indent D 69120 Heidelberg\newline}%\\\bigskip\bigskip\bigskip\bigskip\bigskip \\ %
\thanks{\emph{An \R{} vignette for package sprof. }\\
\indent \emph{URL:} \url{http://sintro. r-forge.r-project.org/
}
\ifx\private\undefined%
\typeout{ommitting private stuff ********}
\else
\\
\indent \emph{Private Version}\\
\fi
}
\email{gs@statlab.uni-heidelberg.de}
\urladdr{http://sintro.r-forge.r-project.org/}
\keywords{R programming, profiling, optimisation, R program language}

\date{May 2013.
%\svnInfoFile \svnInfoRevision
%For quotation, please use the general reference \cite{gs94oned}.\\
\emph{Revised:} July 2013\\
\indent \emph{Typeset}, with minor revisions: \today\  from SVN $Revision$ \svnInfoDate}  
%bottom of title page
%\thanks{\emph{URL:} \url{http://sintro. r-forge.r-project.org/}}

%\usepackage{gssda}
%\usepackage{gsSweave}%\usepackage{SIntro}%\usepackage{Sweave}
%\setkeys{Gin}{width=1.0\textwidth}
%:Sweave

\newcommand\Stt[1]{\textsl{\texttt{#1}}}

%\usepackage{a4wide}

\makeindex
\listfiles
\begin{document}


\maketitle
\section*{Pending changes}
Warning: this is under construction.

This vignette contains experimental material which may sink down to the package implementation, or vanish.

Known issues:
\begin{itemize}
\item {Control information may be included as special stack in raw format.}
\item {A list of profiles may become default. Only one profiling interval value per profile.}
\item {Nodes may be implemented as \ircode{factor}. Work-around for the \R{} factor handling needs to be added, i.e. \ircode{factor} as a data structure.}
\item {changing timing interval is too expensive, as rle is not transparent to data frames. Implement profiles as a list, with a time interval attribute per list element.}
\end{itemize}
\bigskip

{
\setlength{\parskip}{0pt}
\tableofcontents
}
\section*{Profiling facilities in \R{}}
\R{} provides the basic instruments for profiling, both for time based samplers as for 
event based instrumentation. Information on \R{} profiling is in Section 3.2 ``Profiling R code for speed'' and section ``3.3 Profiling R code for memory use''. of  Writing R Extensions \url{http://cran.r-project.org/doc/manuals/R-exts.html}. Specific information on memory profiling is in \url{http://developer.r-project.org/memory-profiling.html}.

However this source of information seems to be rarely
used.

Maybe the supporting tools are not adequate. The summaries provided by \R{}  reduce the 
information beyond necessity. Additional packages are available, but these are not
sufficiently action oriented.

With package \ircode{sprof} we want to give a data representation that keeps the full
profile information. Tools to answer common questions are provided. The data structure 
should make it easy to extend the tools as required.

The package is currently distributed at r-forge as part of the \ircode{sintro} material.

\smallskip
To install this package directly within \R{}, type \\
 {\small   \ircode{install.packages("sprof",repos="http://r-forge.r-project.org")}}

\smallskip
To install the recent package from source directly within \R{}, type\\
    {\small   \ircode{install.packages("sprof",repos="http://r-forge.r-project.org",type="source")}}

\section*{\LaTeX{}  layout tools and \R{} settings}

You may want to skip this section, unless you want to modify the vignette for your own purposes, or look at the internals.

%Tests for TeX
%
%*fref:
%
%\fref{subs:Rprof}
%
%\fref{tab:prSRREbs}
%
%*vref:
%
%subs: \vref{subs:Rprof}
%
%tab: \vref{tab:prSRREbs}
%
%*cref:
%
%subs: \cref{subs:Rprof}
%
%tab: \cref{tab:prSRREbs}
This is the main library we are going to use.
<<>>=
library(sprof)
search()
@

We want immediate warnings, if necessary. Set to level 2 to handle warnings as error.
<<>>=
message("switching  options(warn=1) -- immediate warning on")
options(warn=1)
@
We want a second chance on errors. So install an error handler.
<<>>=
options(error = recover)
@
\smallskip
Print parameters used here:
<<>>=
options(width = 72)
options(digits = 6)
@
For \ircode{str} output, we generally use these settings:
<<>>=
strx <- function(x, 
	max.level=2, vec.len=3, 
	nchar.max=40, 
	list.len=12,
	width=70, strict.width="wrap",...){
	cat(paste("##strx:",deparse(substitute(x)),"\n"))
	str(x, max.level=max.level, 
		vec.len=vec.len, 
		nchar.max=nchar.max, 
		list.len=list.len,
		width=width, strict.width=strict.width,...)
}
@
%This is just a hack to get a nicer output from args:
%<<>>=
%prargs <- function(x){ str(args(x))}
For larger tables and data frames, we use a kludge to avoid long outputs.
\todo{add keep3 to keep header, some middle, tail}
<<>>=
xcutdata.frame <- function(df,  cut, margin){
#! keep3, to add: margin top - random center - margin bottom
	if (!is.data.frame(df)) return(df)
	nrow <- nrow(df)
	# cut a range if it is not empty. 
	# Quiet noop else. 
	# Does not cut single lines.
	 cutrng <- function(cutfrom,cutto){
	 	if (cutfrom<cutto){
		df[cutfrom,] <- NA
		if (!is.null(rownames(df))) rownames(df)[cutfrom] <- "< cut >"
		if (!is.null(df$name)) df$name[cutfrom] <- ""
		
		cutfrom <- cutfrom+1
		df[-(cutfrom:cutto),]
		}#if
	}
	if (!missing(cut))  {df <- cutrng(cut[1],cut[2]); return(df)}
	if (!missing(margin))  {
		if (length(margin)==1) margin <-  c(margin,margin)
	cut <- c(margin[1]+1,nrow-margin[2])
	df <-cutrng(cut[1],cut[2]); 
	return(df)}
#	if (!missing(keep3))  { cut <- c(keep3[1]+1, keep3[1]+1, 
#		nrow-keep3[3]-1,nrow-keep3[3]-1)
#	if (cut[3]-cut[4] > keep3[2]+2){delta<-(cut[3]-cut[2]) div 2
#	cut[3]<-0
#	browser()
#	} else df <- cutrng(cut[1],cut[4])
#	cutrng(cut[1],cut[4]) return(df)}
}

@
We use the \R{} function \ircode{xtable()} for output and \LaTeX \ \ircode{longtable}. A convenient wrapper to use this in out \ircode{Sweave} source is:
\todo{remove text vdots from string/name columns. Use empty string.}
<<>>= 
library(xtable)
prxt <- function (x, digits=2, cut=TRUE, caption=NULL, 
	label=NULL, zero.print=NULL, print.results=TRUE,...)  {
	if (cut) {margin <- 10
	if (nrow(x)> 2*margin+3) x <-xcutdata.frame(x, margin=margin)}
	pr <- print(
		xtable(x, digits=digits, caption=caption, 
				label=label, ...), 
		floating=FALSE, 
		tabular.environment="longtable", 
		caption.placement="top",
		zero.print = ".",
		NA.string="\\vdots", print.results=FALSE)
		if(!is.null(zero.print)) pr <- gsub( " 0 ",zero.print, x=pr)
		if (print.results) cat(pr)
		invisible(pr)
	}
@
%#sanitize.text.function = function(x) { if (x=="\\vdots") " " else if (x=="$") "\\$" else x},
		
This is to be used with
\verb+<<print=FALSE, results =tex, label=tab:prxx>>=+

The graph visualisation family is not friendly. We try to get control by using a wrapper which is at least used to the members of the \ircode{graphviz} clan. This will be used in later sections.
<<>>=
plotviz <- function(x,...)
{
plot(x,  
	attrs=list(node=list(cex=4, fontsize=40,  shape="ellipse")), 
	cex.main=2, ...)
}

@
\section{Profiling}
The basic information provided by all profilers is a protocol of sampled stacks. 
For each recorded event, the protocol has one record, such as a line with a text string showing the sampled  stack.

We use profiles to provide hints on the dynamic behaviour of programs. Most often, this is used to improve or even optimise programs. Sometimes, it is even used to understand some algorithm.

Profiles represent the program flow, which is considered to be laid out by the control structure of a program. The control structure is represented by the control graph, and this leads to the common approach to (re)construct the control graph, map the profile to this graph, and used graph based methods for further analysis. The prime example for this strategy is the GNU profiler \ircode{gprof} (see \url{http://sourceware.org/binutils/docs/gprof/}) which is used as master plan for many common profilers.

\medskip
It is only half of the truth that the control graph can serve as a base for the profiled stacks. In \R{}, we have some peculiarities.

\begin{description}
\item[lazy evaluation] Arguments to functions can be passed as promises. These are only evaluated when needed, which may be at a later time, and may then lead to insertions in the stack. So we may have information resulting from the data flow, interspersed with the control flow.
\item[memory management] Allocation of memory, and garbage collection, may interfere and leave their traces in the stack. While allocation is closely related to the visible control flow, garbage collection is a collective effect largely out of control of the code to execute.
\item[primitives] Internal functions may escape the usual stack conventions and execute without leaving any identifiable trace on the stack.
\item[control structures] In \R{}, many control structures are implemented as function.
Most notably, the \irfunx{misc}{apply} family appears as function calls and can lead to cliques in the graph representation that do not correspond to relevant structures. Since these functions are well know, they can have a special treatment.
\end{description}

So while the stack follows an overall well known dynamics, in \R{} there are exceptions from regularity.

The general approach, by \irfunx{misc}{summaryRprof} and others, is to reduce the profile to node information, or to consider single transitions.

\medskip
We take a different approach.  We take the stacks, as recorded in the profiles as our basic information unit.  From this, we ask: what are the actions we need to answer our questions?
Representation in graphs may come later, if they can help.

If the stacks would come from the control flow only, we could make use of the sequential 
nature of stacks. But since we have to live with the \R{} specific interferences, we stay with the raw stacks.
\todo{rearrange stacks? detect order?}


@

In this presentation, we will use a small list of examples. Since \ircode{Rprof} is not implemented on all systems, and since the profiles tend to get very large, we use some prepared examples that are frozen in this vignette and not included in the distribution, but all the code to generate the examples is provided.


\subsection{Simple regression example}
\label{subs:RegressionExpl}
\label{subs:Rprof}
<<label=RegressionExpl>>=
n <- 10000
x <- runif(n)
err <- rnorm(n)
y <- 2+ 3 * x + err
reg0data <- data.frame(x=x, y=y, err=err)
rm(x,y,err)

@
We will use this example to illustrate the basics. Of course the immediate questions are the variance between varying samples, and the influence of the sample size $n$. We keep everything fixed, so the only issue for now is the computational performance under strict iid conditions.

Still we have parameters to choose. We can determine the profiling granularity by setting the timing interval, and we can use repeated measurements to increase precision below the timing interval.

The timing interval should depend on the clock speed. Using for example 1ms amounts to some 1000 steps on a current CPU, per kernel.
\todo{Can we calibrate times to CPU rate? Introduce cpu clock cycle as a time base}

If we use repeated samples, the usual rules of statistics applies. So taking $100$ runs and taking the mean reduces the standard deviation by a factor $1/10$.
%So with $simruns <- 100$, the mean 
%var mean = var n x / n^2

By the usual \R{} conventions, seconds are used as time base for parameters. However report will use ms as a time base.

Here is an example how to take a profile, using basic \R{}. See \vref{subsec:sprof}
how to use \ircode{sampleRprof} in package \ircode{sprof}  for an easier solution.
<<label=Rprof01>>=
profinterval <- 0.001
simruns <- 100

Rprof(filename="RprofsRegressionExpl.out", interval = profinterval)
	for (i in 1:simruns) xxx<- summary(lm(y~x, data=reg0data))
Rprof(NULL)
@

We now have the profile data in a file \ircode{RprofsRegressionExpl.out}.
For this vignette, we use a frozen version \ircode{RprofsRegressionExpl01.out}.

\subsubsection{R basic}
The basic \R{} functions invite us to get a summary. 

<<>>=
sumRprofRegressionExpl <- summaryRprof("RprofsRegressionExpl01.out")
#str(profile_nodes_rle, max.level=2, vec.len=3, nchar.max=40, list.len=6)
strx(sumRprofRegressionExpl)
@

The summary reduces the information contained in the profile to marginal statistics per node. This is provided in two data frames giving the same information, only in different order.

The file contains several spurious recordings: nodes that have been recorded only few times. It is worth noting these, but then they better be discarded. We use a time limit of 4ms, which given our sampling interval of 1ms means we require more than four observations.

<<print = FALSE, results = tex, label=tab:prSRREbs>>=
prxt(sumRprofRegressionExpl$by.self,
	caption="summaryRprof result: by.self as final stack entry, all records", 
	label="tab:prSRREbs")
@

<<print = FALSE, results = tex, label=tab:prSRREbt>>=
prxt(sumRprofRegressionExpl$by.total[sumRprofRegressionExpl$by.total$total.time>0.004,],
	caption="summaryRprof result: by.total, total time > 4ms", 
	label="tab:prSRREbt")
@

\filledpagebreak
\subsubsection{Package sprof}
\label{subsec:sprof}
In contrast to the common \R{} packages, in the \ircode{sprof} implementation we take a two step approach. First we read in the profile file to an internal representation. Analysis is done in later steps.

<<>>=
sprof01<- readRprof("RprofsRegressionExpl01.out")
@
The data contain identification information for reference. This will be used in the functions of \ircode{sprof} and shown in the displays. Here is the summary of this section:
<<>>=
str(sprof01$info)
@
For this vignette, we change the \ircode{id} information. So in this context:
<<>>=
sprof01$info$id <- "sprof01"
@

We keep this example and use the copy \ircode{sprof01} of it extensively for illustration.
<<eval=FALSE>>=
save(sprof01, file="sprof01lm.RData")
@
To run the vignette with a different profile, replace \ircode{sprof01} by your example. You still have the file for reference.

Package \ircode{sprof} provides a function \irfunx{misc}{sampleRprof} to take a sample and create a profile on the fly, as in
<<eval=FALSE>>=
sprof01temp <- sampleRprof(runif(10000), runs=100)
@
The basic data structure consists of four data frames. The \ircode{info} section collects global information from the input file, such as an identification strings and various global matrix. The \ircode{nodes} section initially gives the same information marginal information as  \ircode{summaryRprof}. The \ircode{stacks} section puts the node information into their calling context as found in the input profile file. The \ircode{profiles} section gives the temporal context. It is implemented as a list, but conceptually it is a data frame. Implementing it as a list allows run length encoding of variables, which unfortunately is not allowed by \R{} in data frames.
\todo{add sampling.interval, sampling.time for backward compatibility}
<<>>=
strx(sprof01)
@
The nodes do not come in a specific order. Access via a permutation vector is preferred. This allows different views on the same data set. For example, \vref{tab:prspbt} uses a permutation by total time, and a selection (compare to \vref{tab:prSRREbt}). The only difference is that \ircode{sprof} works uses a millisecond (ms) base, whereas \R{} in general uses seconds as a base. 

<< print = FALSE, results = tex, label=tab:prspbtself>>=
nodes <- sprof01$nodes[order(sprof01$nodes$self.time, decreasing=TRUE),]
prxt(nodes[nodes$self.time>4,],
caption="splot result: by.self, self time > 4ms", 
	label="tab:prspbtself")
@
At this level, it is helpful to note the expectations, and only then inspect the timing results. Since we are using a linear model, we are not surprised to see functions related to linear models on the top of the list. We may however be surprised to see functions related to data access and to character conversion very high on the list. The sizeable amount of time spent on NA handling is another aspect that is surprising.

<< print = FALSE, results = tex, label=tab:prspbt>>=
nodes <- sprof01$nodes[order(sprof01$nodes$total.time, decreasing=TRUE),]
prxt(nodes[nodes$total.time>4,],
caption="splot result: by.total, total time > 4ms", 
	label="tab:prspbt")
@
\todo{remove text vdots from string/name columns}
Given the sampling structure of the profiles, two aspect are common. The sampling picks up scaffold functions with a high, nearly constant frequency. And the sampling will pick up rare recordings that are near to detection range. The display functions hide these effects by default. In our example, about half of the nodes are cleared by this garbage collector.

Common rearrangements as by total time and by self time are supplied by the display functions.

\irfunx{hplot}{plot\_nodes}, for example, currently gives a choice of four displays for nodes, and supports trimming by default. Our profile starts with 62 nodes. The defaults cut off 34 nodes as uninformative, either because they are too rare, or ubiquitous.
 
%: floating figure
\begin{figure}[htbp]
\begin{center}
<<fig = TRUE, echo = TRUE, print = FALSE, label=sREplotnodes01, width=10, height=10>>=
#10
oldpar <- par(mfrow=c(2,2))
plot_nodes(sprof01)
par(oldpar)
@
\caption{Basic information on node level}
\label{fig:sREplotnodes01}
\end{center}
\end{figure}

See \vref{fig:sREplotnodes01}.

% floating figure end

Information in the time scatterplots may sometimes more accessible
when using a logarithmic scale, so this is added.

If you prefer, you can have the bar charts in horizontal layout, giving more space for labels.
%: floating figure
\begin{figure}[htbp]
\begin{center}
<<fig = TRUE, echo = TRUE, print = FALSE, label=sREplotnodes01h, width=8, height=8>>=
#8
oldpar <- par(mfrow=c(2,2))
plot_nodes(sprof01)
par(oldpar)
@
\caption{Basic information on node level}
\label{fig:sREplotnodes01h}
\end{center}
\end{figure}

See \vref{fig:sREplotnodes01h}.

% floating figure end

We can add colour. To illustrate this, we encode the frequency of the nodes as colour. As a palette, we choose a heat map here. 
\todo{apply colour to selection?}
\todo{spread colour on displayed part}
<<>>=
freqrank01 <- rank(-sprof01$nodes$total.time, ties.method="random")
freqrankcol01 <- heat.colors(length(freqrank01))
@
Here is the node view using these choices:
%: floating figure
\begin{figure}[htbp]
\begin{center}
<<fig = TRUE, echo = TRUE, print = FALSE, label=sREplotnodes01freqcol, width=10, height=10>>=
#10
sprof01$nodes$icol <- freqrank01
oldpar <- par(mfrow=c(2,2))
plot_nodes(sprof01, col=freqrankcol01)
par(oldpar)
@
\caption{Basic information on node level, colour by total time.}
\label{fig:sREplotnodes01freqcol}
\end{center}
\end{figure}

See \vref{fig:sREplotnodes01h}.

% floating figure end


Colour is considered a volatile attribute. So you may need to pay some attention to keep colour indices (and colour 
palettes) aligned to your context. You may want to do experiments with colour, trying to find a good solution for your 
visual preferences. The recommended way is to use some stable colour index (the slot \ircode{icol} is reserved for this) and use this as an index to a choice of colour palettes. So \ircode{icol} becomes a part of the data structure, and the colour palette to be used is passed as a parameter.

\todo{improve colour: support colour in a structure}

\subsubsection{Node classes}
We can add attributes to the plots. But we can also add attributes to the nodes, and use these in the plots. In principle, this has been alway available. We are now making explicit use of this possibility.

The attribute \ircode{icol} is a special case which we used above. If present, it will be interpreted as an index to a colour table. For example, we can collect special well known functions in groups.
\todo{colour by class --  redo. Bundle colour index with colour?}

The node information is to some part arbitrary. You may achieve the same functionality by different functions, and you will see different load in the profiles. Grouping nodes may be a mean to clarify the picture.

Grouping may also help you to focus your attention. ``HOT'' and ``cold''  may be ver helpful tags. These can be used in a flexible way.

\todo{Move class attributes to package code}
\todo{add class by keyword}
<<>>=
nodekeyword0 <- function(node)
{
}
@
<<>>=
nodepackges <- nodepackage(sprof01$nodes$name)
names(nodepackges) <- sprof01$nodes$name
table(nodepackges)
@
<<>>=
sprof01$nodes$icol <-as.factor(nodepackges)
@
%: floating figure
\begin{figure}[htbp]
\begin{center}
<<fig = TRUE, echo = FALSE, print = FALSE, label=sREplotnodes01packcol1, png=TRUE,width=10, height=15>>= 
oldpar <- par(mfrow=c(3,2))

if (require(RColorBrewer)) colpack <- brewer.pal(length(levels(sprof01$nodes$icol)), "Paired") else 
	colpack <- rainbow(length(levels(sprof01$nodes$icol)))

plot_nodes(sprof01, which=1:6, col=colpack)
par(oldpar)
@

\caption{Nodes by package}
\label{fig:sREplotnodes01packcol1}
\end{center}
\end{figure}

See \vref{fig:sREplotnodes01packcol1}.

% floating figure end
<<>>=
x_apply <- c("apply", "lapply", "vapply", "sapply")
x_as <- c("as.list", "as.data.frame", "as.list.data.frame",
	"as.character", "as.list.default","as.name")
@
(Extend as you need it) and then use, as for example:
<<>>=
nodeclass <- rep("x_nn", sprof01$info$nrnodes)
nodeclass[sprof01$nodes$name %in% x_apply] <- "x_apply"
nodeclass[sprof01$nodes$name %in% x_as] <- "x_as"
@
or use assignments on the fly
<<>>=
nodeclass[sprof01$nodes$name %in% 
	c("eval",  "evalFunc",
		"try", "tryCatch", "tryCatchList", "tryCatchOne",
		"doTryCatch")
		] <- "x_eval"
nodeclass[sprof01$nodes$name %in% 
	c("model.frame", "model.matrix.default","model.frame.default",
	 " model.response", "model.matrix", "model.response")
		] <- "x_model"
nodeclass[sprof01$nodes$name %in% 
	c("lm", "lm.fit", "summary.lm")
		] <- "x_lm"
nodeclass[sprof01$nodes$name =="<Anonymous>"] <- "x_Anon"

@
% data.frame(sprof01$nodes$name,sprof01$nodes$icol)
<<>>=
sprof01$nodes$icol <-as.factor(nodeclass)
@
adds a sticky colour attribute. To interpret, you should choose your preferred colour palette, for example \todo{add a reference to colorbrewer}
<<>>=
classcol <- c("red", "green", "blue", "yellow", "cyan", "magenta", "purple")
@
\todo{Defaults by class}

%: floating figure
\begin{figure}[htbp]
\begin{center}
<<fig = TRUE,  label=sREplotnodes01col, width=10, height=15>>= 
#10 15
oldpar <- par(mfrow=c(3,2))
plot_nodes(sprof01, which=1:6, col=classcol)
par(oldpar)
@

\caption{Nodes by class}
\label{fig:sREplotnodes01col}
\end{center}
\end{figure}

Nodes by package: See \vref{fig:sREplotnodes01col}.

\todo{classes need separate colour palette}
% floating figure end
%: floating figure
\begin{figure}[htbp]
\begin{center}
<<fig = TRUE,  label=sREplotnodes01colcb, width=10, height=15>>= 
#10 15
oldpar <- par(mfrow=c(3,2))
plot_nodes(sprof01, which=1:6)
par(oldpar)
@

\caption{Nodes by class: default colour selection}
\label{fig:sREplotnodes01colcb}
\end{center}
\end{figure}

Nodes by class: default colour selection. See \vref{fig:sREplotnodes01colcb}.

% floating figure end


You can break down the frequency by  classes of your choice. But beware of Simpson's paradox. The information you think you see may be strongly affected by your choices - what you see are reflections of conditional distributions. These may be very different from the global picture.

@
If package \ircode{wordcloud} is installed, a different view is possible. This is added in the plots above.


@
\section{A better grip on profile information}
\label{sec:sprof}

The basic information provided by all profilers in \R{} is a protocol of sampled stacks. The conventional approach is to break the information down to nodes and edges. The stacks provide more information than this. One way to access it is to use linking to pass information. This has already been used on the node level in \vref{subsec:sprof}.
\todo{add attributes to stacks, and discuss scope}
\todo{sorting/arranging stacks}

\subsection{The internal details}
For each recorded event, the protocol records one line with a text string showing the sampled  stack 
(in reverse order: most recent first). The stack lines may be preceded by header lines with event 
specific information. The protocol may be interspersed with control information, such as information about the timing interval used. 
%Examples of the protocol format used by the common profilers in in \ref{sec:formats} on page \pageref{sec:formats}.

We know that the structural information, static information as well as dynamic information, can be represented with the
help of a graph. For a static analysis, the graph representation may be the first choice. For a dynamic analysis, the stack information is our first information. A stack is a connected path in the program graph. If we start with nodes and edges, 
we loose information which is readily available in record of stacks.

As we know that we are working with stacks, we know that they have their peculiarities. Stacks tend to grow and shrink. Subsequent events will have extensions and shrinkages of stacks (if the recording is on a fine scale), or stack sharing
common stumps (if the recording is on a coarser scale). We could exploit this information, but it does not seem worth the effort.\todo{re-think: sort stacks}


There have  always been interrupts, and these show up in profiles. In \R{}, there is a related 
problem: garbage collection (GC) may interfere and  leave traces in the stack.

Stack information is first.  The call graph is a second instance that is (re)constructed from the stack recording. The graph represents cumulated one-step information. Longer scale information contained in the stacks is lost in the graph.

Here is the way we represent the profile information:

The profile log file is sanitised:
\begin{itemize}
\item{Control lines are extracted and recorded in a separate list.}
\item{Head parts, if present, are extracted and recorded in a matrix that is kept line-aligned with the remainder}
\item{Line content is standardised, for example by removing stray quotation marks etc.}
\end{itemize}

After this, the sanitised lines are encoded as a vector of  stacks, and references to this.

If necessary,  these steps are done by chunks to reduce memory load.

From the vector of stacks, a vector of nodes (or rather node names) is derived.

The stacks are now encoded by references to the nodes table.
For convenience, we keep the (sanitised) textual representation of the stacks.

So far, texts are in reverse order. For each stack, we record the trailing leaf, and then we reverse order. 
The top of stack is now on first position.

Several statistics can be accumulated easily as a side effect.

Conceptually, the data structure consist of three tables (the implementation may differ, and is subject to change).

The profiles table is the representation of the input file. Control lines are 
collected in a special table. With the control lines removed, the rest is a table, 
one row per input line. The body of the line, the stack, is encoded as a reference 
to a stacks table (obligatory) and header information (optional).

The stacks table contains the collected stacks, each stack encoded as a list of references to the node table. This is obligatory. This list is kept in reverse order (root at position 1). A source line representing the stack information may be kept (optional).

The nodes table keeps the names at the nodes.

Sometimes, it is more convenient to use a simple representation, such as a matrix. Several extraction routines are provided for this, and the display routines make heavy use of this. See \vref{tab:as.matrix}.
\todo{complete matrix conversion}
\begin{table}[htdp]
\caption{Extraction and conversion routines}
\begin{center}
\begin{tabular}{|l|l|}% | left | left |
\irfunx{manip}{profiles\_matrix}&incidence matrix: nodes by event\\
\irfunx{manip}{stacks\_matrix}&incidence matrix: nodes by stack\\
\irfunx{manip}{list.as.matrix}&fill list to equal length and convert to matrix\\
\irfunx{manip}{stackstoadj}&stacks to (correspondence) adjacency matrix\\
\irfunx{manip}{adjacency}&sprof to (correspondence) adjacency matrix
\end{tabular}
\end{center}
\label{tab:as.matrix}
\end{table}%


@
We now can go beyond node level.

This is what we get for free from the node information on our three levels: node, stack, and profile.
\todo{check and stabilise colour linking}
@
%<<fig=TRUE, label= shownodes01, width=12, height=12>>=
%#12 freqrankcol01
%sprof01$nodes$icol <- freqrank
%shownodes(sprof01, col=freqrankcol01)
@
%: floating figure
\begin{figure}[htbp]
\begin{center}
<<fig = TRUE, echo = TRUE, print = FALSE, label=shownodes01rb, width=8, height=8>>= 
#8 rainbow
sprof01$nodes$icol <- freqrank01
shownodes(sprof01, col=rainbow(62))
@
\caption{Nodes by stack and profile}
\label{fig:shownodes01rb}
\end{center}
\end{figure}

See \vref{fig:shownodes01rb}.

% floating figure end

%<<fig=TRUE, label= shownodes01heat, width=8, height=8>>=
%#8 heat.colors
%shownodes(sprof01, col=heat.colors(62))

@
The obvious message is that if seen by stack level, there are different structures. Profiling usually takes place in a framework. So at the base of the stacks, we find entries that are (almost) persistent. Then usually we have some few steps where the algorithm splits, and then we have the finer details. These can be identified using information on the stack level, but of course they are not visible on the node or edge level in a graph representation. On the stack level, we see a socket. If we want a statistic, we can look at number of different nodes by level.
@
<<>>=
stacks_nodes <- list.as.matrix(sprof01$stacks$nodes)
nrnodes <- apply(stacks_nodes,1,function(x) {length(unique(x))})
cat("nr unique nodes per stack level\n")
nrnodes
@
<<fig = TRUE, echo = TRUE, print = FALSE, label=nrunique, width=3, height=6, include = FALSE>>= 
plot(x=nrnodes, y= 1:length(nrnodes), xlab="nr of unique nodes", ylab="stack level")
abline(h=2.5,col="green")
abline(h=12.5,col="green")
@

%: floating figure
\begin{figure}[htbp]
\begin{center}
%\includegraphics[width = 1in]{S01base-needle40}%
\includegraphics[width = 2in]{sprofiling-nrunique}%
\caption{Nr of unique nodes by stack level.}
\label{fig:nrunique}
\end{center}
\end{figure}
\todo{check and synchronise}
Nr. of unique nodes by stack level: See \vref{fig:nrunique}. 

We will come to finer tools in \vref{sec:rle} but for the moment the rough information should suffice to take a decision. In our example, it is only a matter of taste whether we cut off 12 levels, or we want to work with five components after cutting 13 levels
%, with a matter of taste as to go for two levels to cut off, or three. Level three leaves us to start with five roots on the next level in our example.

% floating figure end
Not so often, but a frequent phenomenon is to have some ``burn in'' or ``fade out''. To identify this, we need to look at the profile level. The indicator to check is to whether we have very low frequency stacks at the beginning or the end of our recording. The counts to be takes as reference can be seen from the summary.
<<>>=
summary(sprof01$stacks$refcount)
#
<<>>=
df <- data.frame(stack=sprof01$profiles$data, 
	count=sprof01$stacks$refcount[sprof01$profiles$data])
#df <- xcutdata.frame(df, margin=10)
<<print = FALSE, results = tex, label=tab:margin>>=
prxt(df, caption="Stacks by event: burn in/fade out",
	label="tab:margin",
	digits=c(0,0,0) )
@
Here at least one recording on either side is a candidate to be off. We may have a look at the next recordings and decide to go beyond and cut off events $1:3$ and $519:522$.

At a closer look, we may find stack patterns (maybe marked by specific nodes) that indicate administrative intervention and rather should be handled as separators between distinct profiles rather than as part of the general dynamics. Again we may use some indicator nodes to be used as marker for special stacks.
\todo{example}

Stable framework effects sometimes are obvious and can be detected automatically. ``burn in'' or ``fade out' may need a closer look, and special stacks need and individual inspection on low frequency stacks.  Tools for trimming are in \vref{sec:trimming}.


\subsection{The free lunch}
What you have seen so far is what you get for free when using package \ircode{sprof}.
\todo{colours. recolour. Propagate colour to graph.}

If you want to wrap up the information and look at it from a graph point of view, here is just one example. More are in \vref{sec:graph}. But before changing to the graph perspective, we recommend to see the next sections, not to skip them. The preview, at this point, taking package \ircode{graph} as an example:
%<<fig=TRUE, label=sprofadjNEL8, width=8, height=8>>=
%#8 sprofadjNEL
%library(graph)
%sprof01adjNEL <- as(adjacency(sprof01),"graphNEL")
%plot(sprof01adjNEL,  main="sprof01: graph layout example", cex.main=2)
%rm(sprof01adjNEL); 
%# detach("package:graph") 
%#! sorry. still needed by Rgraphviz -- clean up
@
<<>>=
library(graph)
search() 
<<fig=TRUE, label=sprofadjNEL6, width=6, height=6>>=
#6 sprofadjNEL
sprof01adjNEL <- as(adjacency(sprof01),"graphNEL")
plotviz(sprof01adjNEL,  main="sprof01: graph layout example", 
	sub=sprof01$info$id)
rm(sprof01adjNEL); 
# detach("package:graph") 
#! sorry. still needed by Rgraphviz -- clean up
@

\subsection{Cheap thrills}

Before starting additional inspection, the data better be trimmed. Trimming routines are in \vref{sec:trimming},
but the data structure is robust enough to allow manual intervention as used here.
\todo{updateRprof needs careful checking. For now, we are including long listings here to provide the necessary information}

<<>>=
sprof02 <- sprof01; sprof02$info$id <- "sprof02: trimmed"
@
On the stack level, we take brute force to cut off the basic stacks.
<<>>=
basetrim <- 13
sprof02$stacks$nodes <- sapply(sprof02$stacks$nodes, 
	function (x){if (length(x)> basetrim) x[-(1:basetrim)] })
@
We have noted burn in/fade out. This is on the profile level. Taking the big knife is not advisable, since time information and stack data must be synchronised. So we are more cautious.
<<>>=
sprof02$profiles$data[1:3] <- NA
sprof02$profiles$data[519:522] <- NA
@
\todo{handle empty stacks and zero counts gracefully}
At this point, it is a decision whether to adapt the timing information, or keep the original information. Since this decision does affect the structural information, it is not critical. But analysis is easier if unused nodes are eliminated.\todo{add a purge function} The \ircode{info} section is inconsistent at this point. Another reason to call \ircode{updateRprof}().
<<>>=
strx(sprof02$info)
<<print=FALSE,  results=tex, label=tab:sprof02info1>>=
prxt(sprof02$nodes,cut=FALSE,  
	caption="sprof02, before update",
	label="tab:sprof02info1",
	digits=c(0,0,0,2,0,2,0),
	zero.print=" . "
	)
<< label=sprof02Upd>>=
sprof02 <- updateRprof(sprof02)
sprof02$info$id <- "sprof02 updated"
@
%print(xtable(sprof02$nodes, caption="sprof02, before update", 
%	label="tab:sprof02info1"),floating=FALSE, 
%		tabular.environment="longtable", 
%		caption.placement="top",
%		NA.string="\\vdots")
%#str(sprof02)
<<>>=
strx(sprof02$info)
<<print=FALSE, results=tex, label=tab:sprof02info2>>=
prxt(sprof02$nodes, cut=FALSE, caption="sprof02, after update", 
	label="tab:sprof02info2",
	digits=c(0,0,0,2,0,2,0),
	zero.print=" . "
)
	
@
%: floating figure
\begin{figure}[htbp]
\begin{center}
<<fig = TRUE, echo = TRUE, print = FALSE, label=shownodes02, png=TRUE, width=8, height=8>>= 

#8 8
shownodes(sprof02)
@
\caption{Nodes by stack and profile}
\label{fig:shownodes02}
\end{center}
\end{figure}

See \vref{fig:shownodes02}.

% floating figure end

\subsubsection{Trimming}
\label{sec:trimming}

\todo{This section needs to be reworked}

\todo{trimexample}

\todo{add trim by keyword}

<<>>=
trimstacks <- function(sprof, level){
lapply(sprof$stacks$nodes, function(x) {x[-(1:level)]})
}
@
%<<fig=TRUE, label=sREimgprofilesTr>>=
<<label=sREimgprofilesTr>>=
sprof01Tr <- trimstacks(sprof01, 11)
#profile_nodesTr <- profiles_matrix(sprof01Tr)
#image(x=1:ncol(profile_nodesTr),y=1:nrow(profile_nodesTr), t(profile_nodesTr),xlab="event", ylab="depth", main="nodes by event")

<<>>=
nodefreq <- rep(0,length(sprof01$nodes$name))
for (i in (1:length(sprof01$stacks$nodes))){
	nodefreq <- nodefreq +   
		table( factor(sprof01$stacks$nodes[[i]], 
			levels <- 1:length(sprof01$nodes$name), 
			ordered=FALSE))
	}
names(nodefreq) <- sprof01$nodes$name
@
Top frequent nodes.
<<fig=TRUE, label=sREplotnodefreq>>=
ndf <- nodefreq[nodefreq>1]
ondf <- order(ndf,decreasing=TRUE)
barplot(ndf[ondf])
<<fig=TRUE, label=sREplotnodefreq1>>=
barplot(ndf[ondf], col=rainbow(length(ondf)))
@ 
Top frequent stacks.
<<fig=TRUE, label=sREplotstackfreq>>=
x <- sprof01
xsrc <- as.matrix(x$stacks$refcount)
rownames(xsrc) <- rownames(xsrc, do.NULL=FALSE, prefix="S")
#stf <- x$stacks$refcount[x$stacks$refcount>1]
#names(stf) <-  x$stacks$shortname[x$stacks$refcount>1]
stf <- xsrc[xsrc>1]
names(stf) <- rownames(xsrc)[xsrc>1]
ostf <- order(stf,decreasing=TRUE)
barplot(stf[ostf])
@
There is no statistics on profiles. Profiling are our elementary data.
However we can link to our derived data to get a more informative display.
For example, going one step back we can encode stacks and use these colour codes in the display of a profile.

Or going two steps back, we can encode nodes in colour, giving coloured stacks, and use these in the display of profile data.

\subsubsection{Surgery}
Looking at nodes gives you a point-wise horizon. Looking at edges gives you a one step horizon. The stacks give a wider horizon, typically a step size of 10 or more. The stacks we get from \R{} have peculiarities, and we can handle with this broader perspective. These are not relevant if we look point-wise, but may become dominating if we try to get a global picture. We take a look ahead (details to come in \vref{sec:graph} and have a preview how our example is represented as a graph. Left is the original graph as recovered from the edge information,  right the graph after we have cut off the scaffold effects.
\todo{cut next level}

@
Control structures may be represented in \R{} as function, and these may lead to concentration points. 
Using information from the stacks, we can avoid these by introducing substitute nodes on the stack level. 
For example, \ircode{lapply} is appearing in various contexts and may be confusing any graph representation.
We can avoid this by replacing a short sequence.
\ircode{"[" "lapply" ".getXlevels"  -> "<.getXlevels\_[>"}
\todo{Implement. Currently best handled on source=text level}
If the node does not exist, we want to add it to our global variable. For now, we do it 
using expressions on the \R{} basic level and avoid tricks like simulating ``call by reference''.
\todo{function addnode using ``call by reference'' to be added}
<<>>=
sprof03 <- sprof02; sprof03$info$id <- "sprof03: surgery"
node <- "<.getXlevels_[>"
#nodei <- function(sprofx, node, warn = TRUE)
{
	i <- match(node, sprof03$nodes$name, nomatch=0)
	if (i==0){
		sprof03$nodes$name <- as.character(sprof03$nodes$name)
		sprof03$nodes <- rbind(sprof03$nodes,NA)
		i <- length(sprof03$nodes$name)
		sprof03$nodes$name[i] <- node
	if (as.logical(options("warn"))) 
		message("node added. An updateRprof() may be necessary.")
	}
	nodei <- i
}
# sprof <- sprof01; nodei(sprof,"kiki"); sprof$nodes
@
Now we have to identify the stacks that may get a replacement.
First find the candidates.
<<>>=
targeti <- match("lapply", sprof03$nodes$name, nomatch=0)
found <- lapply(sprof03$stacks$nodes, function(X) match(targeti,X))
found <- data.frame(stack=1:length(found), position=as.matrix(found))
found[!is.na(found$position),]
# as.factor(sprof03$stacks$nodes[!is.na(found)], 
#		levels=1: length(sprof03$nodes$name), labels=sprof03$nodes$name)
@
For now, these are just candidates.
\todo{implement replacement on the stack level.}

Other candidates are:\\
\ircode{"as.list" "vapply" "model.frame.default" -> "<model\_as.list>"}\\
or\\
\ircode{"as.list" "vapply" "model.matrix.default" -> "<model\_matrix\_as.list>"}

\todo{implement}
<<>>=
newchopnode <- function(nodenames, chop) {
tmpname <- paste("<",as.character(nodenames[chop]),">")
# chec for existing.
# add if necessary
tmpname
}
chopstack <- function(x , chop, replacement) 
{
# is chop in x`
# y: cut x.
# merge x <- head + replacement + tiail
return(x)
}

@
\subsection{Run length}
\label{sec:rle}
\todo{needs serious revision}
\todo{test na removal in rrle}
For a visual inspection, runs of the same node and level in the profile 
are easily perceived. For
an analytical inspection, we have to reconstruct the runs from the data. In stacks, runs 
are organised hierarchically. On the root level, runs are just ordinary runs. On the next levels, runs have to be defined given (within) the previous runs. So we need \irfunx{manip}{rrle}, a recursive version of \ircode{rle}, applied to the profile information.
This gives a detailed information about the presence time of each node, by stack level.
\todo{use sprof02 or sprof03?}
\todo{handle NA as special case}
<<>>=
profile_nodes <- profiles_matrix(sprof02)

profile_nodes_rle<- rrle(profile_nodes, collapseNA=FALSE) 
#!NA needs special case in run length handling.

strx(profile_nodes_rle, list.len=5)

@
%<<>>=
%# can we trust factor handling? For now, let us play it safe.
%profile_nodesf <- factor(profile_nodes, levels=1:62, labels=sprof02$nodes$name)
%dim(profile_nodesf) <- dim(profile_nodes)
%profile_nodes_rlef<- rrle(profile_nodesf) # Error in rle(x[1, ]) : 'x' must be an atomic vector

@
On a given stack level, the run length is the best information on the time used per call, and the run count of a node is the best information on the number of calls. So this is a prime starting point for in-depth analysis.
\todo{keep as factor. This is a sparse cube with margins node, stack level, run length. Nodes are mostly concentrated on few levels.}
\todo{Warning: data structure still under discussion}
%<<>>=
%# side effect: NAs are removed
%profile_nodes_rlet <- lapply(profile_nodes_rle, 
%	function(x) table(x,dnn=c("run length","node")) )
%	
%invisible(lapply(profile_nodes_rlet, 
%	function(x) print.table(x,zero.print = ".") ))
@
\todo{hack. replace by decent vector/array based implementation}
\todo{add names for node dimension}
%<<>>=
%nodesprofile <- function(sprof){
%profile_nodes <- profiles_matrix(sprof02)
%profile_nodes_rle<- rrle(profile_nodes, collapseNA=FALSE) 
%
%maxnode <-0
%maxlen <-0
%maxlevel <-length(profile_nodes_rle)
%for (lev in (1:maxlevel) ) {
%	prlv <- profile_nodes_rle[[lev]]
%	if (!is.null(prlv)) {
%		maxn <- max(prlv$values, na.rm=TRUE)
%		if (maxn>maxnode) maxnode <- maxn
%		maxl <- max(prlv$lengths, na.rm=TRUE)
%		if (maxl>maxlen) maxlen <- maxl
%		# cat("Level ",lev,maxn," Length:",maxl,"\n")
%	}
%}
%## collapse profile_nodes_rle to 3d array. Allocate memory first.
%profile_nodes_rlearray <- array(0, 
%	dim=c(maxnode,length(profile_nodes_rle), maxlen), 
%	dimnames= list("node"=sprof02$nodes$name[1:maxnode], 
%		"level"=1:length(profile_nodes_rle), 
%		"run_length"=1:maxlen))
%		
%		for (lev in (1:maxlevel) ) {
%	prlv <- profile_nodes_rle[[lev]]
%	if (!is.null(prlv)) {
%	  for (j in (1: length(prlv$lengths))){
%		 if (!is.na(prlv$values[j])){
%			profile_nodes_rlearray[prlv$values[j],lev,prlv$lengths[j]] <-
%			profile_nodes_rlearray[prlv$values[j],lev,prlv$lengths[j]] +1
%			#cat(lev,j,":",prlv$values[j],lev,prlv$lengths[j],"\n")
%		 }#if (!is.na
%	   }#for j
%	}
%}
%
%return(profile_nodes_rlearray)
%} # nodesprofile
@
If you need it, you can represent the run lenght information by level as a matrix. 
This is expanding a sparse matrix to full and should be avoided.
 
<<>>=
profile_nodes_rlearray <- nodesprofile(sprof02)
strx(profile_nodes_rlearray)
@
\todo{add summary for NA}	

\todo{add marginals and conditionals. Provide function node\_summary.}
This allows us to extract marginal from \ircode{provlev[ node, level, run length]}.
<<>>=
nn <- profile_nodes_rlearray["model.frame", , ]
print.table(addmargins(nn), zero.print = ".")
@
\todo{rescale to application scale}
\todo{replace sum by weighted sum}
\todo{allow sorting, e.g. by marginals}
<<>>=
mt <- margin.table(profile_nodes_rlearray, margin = c(1,3))
#amt <- addmargins(mt)
mts <- apply(mt,1,sum)
mtt <- apply(mt,1,function (x) {sum(x*seq(along.with=x))})
mtav <- mtt/mts
amt=cbind(mt,count=mts, total_time=mtt, avg=mtav)
amt <- amt[amt[,"count"]>0,]
amt <- amt[order(amt[,"total_time"], decreasing=TRUE),]

#   print.table(as.table(amt[,1:9]), zero.print = ".") 
## ??? print.table changes format when col.10 is present.
@
%????????? tex error in table.
%cannot handle [. Needs to be replaced by $[$.

But \ircode{print.xtable} has no \ircode{zero.print} \ldots
\todo{ $[$ needs to be hidden for print.xtable}
\todo{handle gaps in run length = NA counts}
<<print = FALSE, results = tex, label=tab:pramt4>>=
xr <- rownames(amt)
#for (i in (1:length(xr))) {xr[i] <- sub(xr[i],"\\[","$[$", fixed=TRUE)}
 #xr <- paste("$",xr,"$")
xr <- gsub("[","{[}",xr, fixed=TRUE)
xr <- gsub("_","\\_",xr, fixed=TRUE)
xr <- gsub("^","\\^",xr, fixed=TRUE)
rownames(amt)<- xr

prxt(amt[amt[,"count"]>1,],
 caption="Marginal statistics on nodes by run length, sorted by total time used,  count > 1 only", 
	label="tab:pramt1", 
	digits=c(rep(0,dim(amt)[2]) ,2), zero.print=" . ") #dim(amt)[2]-1, +1 for rownames
@
See \vref{tab:pramt1}
%<<>>=
%prop.table(profile_nodes_rlearray, margin = c(1,3))
@
\todo{add current level}

\todo{generate a coplot representation}
\todo{add time per call information: add marginals statistics run time by node}

\todo{table:  node \#runs  min  median run length  max}


\subsection{Graph package}
<<>>=
library(graph)
search() 
<<fig=TRUE, label=sprofadj01NEL, width=12, height=6>>=
#12 6
oldpar <- par(mfrow=c(1,2))
plotviz(as(adjacency(sprof01),"graphNEL"),  
	main="graph layout sprof01", sub=sprof01$info$id)
plotviz(as(adjacency(sprof02),"graphNEL"),  
	main="graph layout sprof02", sub=sprof02$info$id)
par(oldpar)
@
\R{} is function based, and control structures in general are implemented as functions. In a graph representation, they appear as nodes, concentrating and seeding to unrelated paths. We can detect these on the stack level and replace them by surrogates, introducing new nodes.
@

\todo{fix null name}
<<>>=
sprof04 <- readRprof("RprofsRegressionExpl03.out"); sprof04$info$id <- "sprof04"
#sprof04$nodes$name[1] <-  sprof04$nodes$name[2]
#sprof04$nodes$name[1]<-"<noop>"??

@
\todo{cut top levels}
<<>>=
library(graph)
search() 
<<>>=

asNEL_sprof <- function(sprof, weight=TRUE){

a04<-adjacency(sprof)


rnames <- rownames(a04)
rnames[1]<-"noop"; 
dimold <- dim(a04)
if (!weight) {a04 <- as.numeric(a04); dim(a04) <- dimold} #! define lwd first
rownames(a04) <- rnames; colnames(a04) <- rnames; 

el04 <- edgematrix(a04)
el04.lwd <- rank(el04$count, ties.method="min")
el04$lwd  <- ceiling(el04.lwd /max(el04.lwd )*6)


a04NEL <- as(a04,"graphNEL")
nodeRenderInfo(a04NEL) <- list(shape="ellipse")
nodeRenderInfo(a04NEL) <- list(cex=0.6, shape="ellipse")
nodeRenderInfo(a04NEL) <- list(weight=1)
nodeRenderInfo(a04NEL) <- list(color="yellow")

#nodeRenderInfo(a04NEL) <- list(weight=1)

#edgeRenderInfo(a04NEL) <- list(lwd=el04$lwd)
#edgeRenderInfo(a04NEL)$lwd <- el04$lwd
for (i in 1:length(el04$lwd))
{edgeRenderInfo(a04NEL)$lwd[i] <- el04$lwd[i]}
a04NEL
}

<<>>=
a04NEL <- asNEL_sprof(sprof04)

<<fig=TRUE, label=sprofadj04NEL1, width=12, height=12>>=
#12 12 --ellipses are lost!! needs to be recovered
plot(a04NEL,  main="graph layout sprof04 plot" ,sub="xxx")

<<fig=TRUE, label=sprofadj04NEL1plotviz, width=24, height=12>>=
#24 12 --ellipses are lost?? needs to be recovered
plotviz(a04NEL,  main="graph layout sprof04 plotviz",sub="xxx")
@
To  use attributes on nodes and edges, we need \ircode{Rgraphviz}.
<<>>=
library(Rgraphviz)
search()
<<fig=TRUE, label=sprofadj04NEL00, width=12, height=12>>=
#12 12
a04NEL <- layoutGraph(a04NEL)
renderGraph(a04NEL)
<<fig=TRUE, label=sprofadj04NEL0, width=10, height=10>>=
#10 10
a04NEL0 <- asNEL_sprof(sprof04, weight=FALSE)

a04NEL0 <- layoutGraph(a04NEL0)
renderGraph(a04NEL0)
detach(package:Rgraphviz)

@
%edge.lwd<-sprofadj
%edge.lwd[edge.lwd>0]<- rank(edge.lwd[edge.lwd>0], ties.method="min")
%#edge.lwd <- trunc(sprofadj/max(sprofadj)*10)+1
%edge.lwd <- round(edge.lwd/max(edge.lwd)*12)
%
%
%a04NEL <- layoutGraph(a04NEL,  edgeAttrs=list(lwd=edge.lwd))

%plot(ag, attrs=list(node=list(cex=2,fontsize=40), edge=list(lwd=2,color=c("red","yellow"))), sub="xx", cex=2)
\section{Standard output}

For a reference, here are complete outputs of the standard functions.

<<>>=
sprof <- sprof01
@
\subsection{Print}
We omit the (lengthy) print output here and just give the commands as a reference.
\todo{Clarify:"print prints its argument and returns it invisibly (via invisible(x))." Return the argument, or some print represntation?}
\todo{is there a print=FALSE variant to postpone printing to e.g. xtable?}
%<<print=FALSE, results =tex, label=rpoprintnodes>>=
<<label=rpoprintnodes, print=FALSE, eval=FALSE>>=
print_nodes(sprof)
<<label=rpoprintstacks, print=FALSE, eval=FALSE>>=
print_stacks(sprof)
<<label=rpoprintprofiles, print=FALSE, eval=FALSE>>=
print_profiles(sprof)
@
The \irfunx{misc}{print} method for \ircode{sprof} objects concatenates 
these three functions.

\subsection{Summary}
<<label=rposumnodes, print=FALSE, eval=FALSE>>=
summary_nodes(sprof)
<<label=rposumstacks, print=FALSE, eval=FALSE>>=
summary_stacks(sprof)
<<label=rposumprofiles, print=FALSE, eval=FALSE>>=
summary_profiles(sprof)
@
The \irfunx{misc}{summary} method for \ircode{sprof} objects concatenates 
these three functions.

\filledpagebreak
\subsection{Plot}
%Looking at lists of numbers is not too informative. We get a first impression 
%by plotting the data. 
%Examples of the plot output is not given here. Please run the examples, or 
%see the \ircode{sprof} package reference.
%%use 
%%	fig=TRUE,  
%%when widht/heifht are fixed.
%<<fig=TRUE, label=sREplotnodes, width=12, height=12>>=
%
%#plot_nodes(sprof01, col=nodescol[nodescore])
%oldpar <- par(mfrow=c(2,2))
%plot_nodes(sprof01)
%par(oldpar)
%@
%<<fig=TRUE, label=sREplotnodes>>=
%
%nodescore <- 
% (sprof01$nodes$total.time * 
% sprof01$info$nrnodes) %/% max(sprof01$nodes$total.time)
%nodescol <- terrain.colors(sprof01$info$nrnodes)
%sprof01$nodes <- cbind(sprof01$nodes,nodescore,nodescol[nodescore])
%
%plot_nodes(sprof01, col=nodescol[nodescore])
%<<fig=TRUE,  label=sREplotstacks, width=12, height=6>>=
%oldpar <- par(mfrow=c(1,2))
%plot_stacks(sprof01)
%par(oldpar)
%
%<<fig=TRUE,  label=sREplotprofiles323, width=12, height=12>>=
%oldpar <-par(mfrow=c(2,2))
%plot_profiles(sprof01)
%par(oldpar)
%@
%The \irfunx{misc}{plot} method for \ircode{sprof} objects concatenates 
%these three functions.
%
%<<fig=TRUE,  label=rpoplotnodes, width=12, height=12>>=
%oldpar<- par(mfrow=c(2,2))
%plot_nodes(sprof)
%par(oldpar)
%@
%\filledpagebreak
%<<fig=TRUE,  label=rpoplotstacks, width=12, height=6>>=
%oldpar<- par(mfrow=c(1,2))
%plot_stacks(sprof)
%par(oldpar)
%@
%\filledpagebreak
%<<fig=TRUE,  label=rpoplotprofiles, width=12, height=12>>=
%oldpar<- par(mfrow=c(2,2))
%plot_profiles(sprof)
%par(oldpar)
%@
%The \irfunx{misc}{plot} method for \ircode{sprof} objects concatenates these three functions.
%\filledpagebreak
%
\section{Graph}
\label{sec:graph}
Graph layout is a theme of its own. Proposals are readily available, as are their implementation. For some of them, there are \R{} interfaces or re-implementations in \R{}. Their usefulness in our context has to be explored, and the answers will vary with personal preferences. 

For some graph layout packages we illustrate an interface here and show a sample result. We use the original profile data here. This is a nasty graph with some \R{} stack peculiarities. The corresponding results for the trimmed profile data are shown in the next section \vref{subsec:graphtre}. This is a more realistic example of the kind of graphs you will have to work with.

\todo{by graph package: preferred input format?}
\todo{use attributes. Edge with should be easy.}
\todo{include information from stack connectivity.}

@
\subsection{Example: regression}
\label{subsec:graphre}

%Packages used to run examples or
%tests conditionally (e.g. via if(require(pkgname))) should be listed in ÔSuggestsÕ or
%ÔEnhancesÕ.
In this section, we use the recent version of our example, \ircode{sprof02} for demonstration.
You can re-run it, using your  \ircode{sprof} data by modifying this instruction:

<<>>=
sprof <- sprof02
@
To interface \ircode{sprof} to a graph handling package,  \irfunx{util}{adjacency} can extract the adjacency matrix from the profile.

There are various packages for finding a graph layout, and the choice is open to your preferences.  The \R{} packages for most of these are just wrapper

<<>>=
sprofadj <- adjacency(sprof)

@
This is  a format any graph package can handle (maybe). To be on the save side, we provide an (extended) edge list. The added component \ircode{lwd} is a proposal for the line width in the graph rendering.
<<>>=
sprofedgel <- edgematrix(sprofadj)

sprofedgel.lwd <- rank(sprofedgel$count, ties.method="min")
sprofedgel$lwd  <- ceiling(sprofedgel.lwd /max(sprofedgel.lwd )*12)

@
\filledpagebreak
\subsubsection{graph package}
<<>>=
library(graph)
search() 
<<>>=
sprofadjNEL <- as(sprofadj,"graphNEL")
<<fig=TRUE, label=sprofadjNEL,width=8, height=8>>=
plotviz(sprofadjNEL,  main=paste("graph layout\n",sprof$info$id))
@
<<>>=
detach("package:graph")
@
\filledpagebreak
\subsubsection{igraph package}
<<>>=
library(igraph)
search() 
<<>>=
sprofig <- graph.adjacency(sprofadj)
<<fig=TRUE, label=sprofig,width=8, height=8>>=
plot(sprofig, main="sprof01: igraph layout")
#plot(sprofig, main="sprof01: igraph layout", cex.main=2)
#plotviz(sprofig, main="sprof01: igraph layout")

detach("package:igraph")
@
\filledpagebreak
\subsubsection{network package}
<<>>=
library(network)
search()
<<fig=TRUE, label=nwsprofadj,width=8, height=8>>=
nwsprofadj <- as.network(sprofadj) # names is not imported 
network.vertex.names(nwsprofadj) <- rownames(sprofadj) # not honoured by plot
plot(nwsprofadj, label=rownames(sprofadj), main="sprof01: network layout", cex.main=2)
@
\filledpagebreak
Experiments to include weight. \todo{maximum edge.lwd?}
<<fig=TRUE, label=nwsprofadje,width=8, height=8>>=
edge.lwd<-sprofadj
edge.lwd[edge.lwd>0]<- rank(edge.lwd[edge.lwd>0], ties.method="min")
#edge.lwd <- trunc(sprofadj/max(sprofadj)*10)+1
edge.lwd <- ceiling(edge.lwd/max(edge.lwd)*12)
plot(nwsprofadj, label=rownames(sprofadj), main="sprof01: network layout", cex.main=2, edge.lwd=edge.lwd)
detach("package:network")
@
\filledpagebreak
\subsubsection{Rgraphviz package}
<<>>=
library(Rgraphviz)
search()
<<>>=
sprofadjRag <- agopen(sprofadjNEL, name="Rprof Example")
<<fig=TRUE, label=sprofadjvizdot,width=8, height=8>>=

# 8 8
plotviz(sprofadjRag, main="sprof01: Graphviz dot layout")
@
%agopen(graph, name, nodes, edges, kind = NULL, layout = TRUE,
%layoutType = "dot",
%attrs = list(), nodeAttrs = list(), edgeAttrs = list(),
%subGList = list(), edgeMode = edgemode(graph),
%recipEdges=c("combined", "distinct"))

%dot, neato, twopi, circo, and fdp.
\filledpagebreak
<<fig=TRUE, label=sprofadjvizneato,width=8, height=8>>=
#8 8
plot(sprofadjRag,"neato", main="sprof01: Graphviz neato layout",)
@
\filledpagebreak
<<fig=TRUE, label=sprofadjviztwopi,width=6, height=6>>=
#6 6
plot(sprofadjRag,"twopi", main="sprof01: Graphviz twopi layout")
@
\filledpagebreak
<<fig=TRUE, label=sprofadjvizcirco,width=8, height=8>>=
#8 8
plot(sprofadjRag,"circo", main="sprof01: Graphviz circo layout")
@
\filledpagebreak
<<fig=TRUE, label=sprofadjvizfdp,width=8, height=8>>=
#8 8
plot(sprofadjRag,"fdp", main="sprof01: Graphviz fdp layout")
@
\filledpagebreak
\subsection{Trimmed example: regression}
\label{subsec:graphtre}
%Packages used to run examples or
%tests conditionally (e.g. via if(require(pkgname))) should be listed in ÔSuggestsÕ or
%ÔEnhancesÕ.
In this section, we use the reduced version of our example, \ircode{sprof04} for demonstration. Except for the change of the data set, this is just a copy of the previous chapter, collecting the various layouts for easy reference.

Some experiments may have found their way to this chapter. They will be expelled.

You can re-run it, using your  \ircode{sprof} data by modifying this instruction:

<<>>=
sprof <- sprof04
@
To interface \ircode{sprof} to a graph handling package,  \irfunx{adjacency}{until} can extract the adjacency matrix from the profile.

<<>>=
sprofadj <- adjacency(sprof)
adjname <- colnames(sprofadj)
adjname[adjname==""] <- "<NULL>"
 colnames(sprofadj) <- adjname
 rownames(sprofadj) <- adjname
@
This is  a format any graph package can handle (maybe).
@
\filledpagebreak
\subsubsection{graph package}
<<>>=
library(graph)
search()
@
Some tests for scaling \ldots
<<>>=
sprofadjNEL <- as(sprofadj,"graphNEL")
<<fig=TRUE, label=s04adjNEL,width=8, height=8>>=
#8
plot(sprofadjNEL,  main="sprof04: graph layout",)
#detach("package:graph")
<<fig=TRUE, label=s0418adjNEL, width=18, height=18>>=
#18
plot(sprofadjNEL,  main="sprof04: graph layout",)
#detach("package:graph")
<<fig=TRUE, label=s0412adjNEL, width=12, height=12>>=
#12
plot(sprofadjNEL,  main="sprof04: graph layout")
#detach("package:graph")

@
\filledpagebreak
\subsubsection{igraph package}
<<>>=
library(igraph)
search()
<<>>=
sprofig <- graph.adjacency(sprofadj)
<<fig=TRUE, label=s04ig,width=6, height=6>>=
#6
#plot(sprofig, main="sprof04: igraph layout", cex.main=2)
plot(sprofig, main="sprof04: igraph layout: trimmed data")
detach("package:igraph")
@
\filledpagebreak
\subsubsection{network package}
<<>>=
library(network)
search()
<<fig=TRUE, label=s04nwsprofadj,width=6, height=6>>=
#6
nwsprofadj <- as.network(sprofadj) # names is not imported 
network.vertex.names(nwsprofadj) <- rownames(sprofadj) # not honoured by plot
plot(nwsprofadj, label=rownames(sprofadj), 
	main="sprof04: network layout: trimmed data", cex.main=2)
@
\filledpagebreak
<<fig=TRUE, label=s04nwsprofadje,width=8, height=8>>=
#8
edge.lwd<-sprofadj
edge.lwd[edge.lwd>0]<- rank(edge.lwd[edge.lwd>0], ties.method="max")
#edge.lwd <- trunc(sprofadj/max(sprofadj)*10)+1
edge.lwd <- round(edge.lwd/max(edge.lwd)*12)
plot(nwsprofadj, label=rownames(sprofadj), 
	main="sprof04: network layout: trimmed data", 
	cex.main=2, edge.lwd=edge.lwd)
@
\filledpagebreak
<<fig=TRUE, label=s04nwsprofadjekamadakawai, width=12, height=12>>=
#12
plot(nwsprofadj, label=rownames(sprofadj), 
main="sprof04: network kamadakawai layout: \n trimmed data", 
mode="kamadakawai",
cex.main=2, edge.lwd=edge.lwd)
@
\filledpagebreak
<<fig=TRUE, label=s04nwsprofadjecircle,width=8, height=8>>=
plot(nwsprofadj, label=rownames(sprofadj), 
	main="sprof04: network circle layout: \n trimmed data", 
	mode="circle",
	cex.main=2, edge.lwd=edge.lwd)
<<fig=TRUE, label=s04nwsprofadjefruchtermanreingold,width=8, height=8>>=
plot(nwsprofadj, label=rownames(sprofadj), 
	main="sprof04: network fruchtermanreingold layout: \n trimmed data", 
	mode="fruchtermanreingold",
	cex.main=2, edge.lwd=edge.lwd)

detach("package:network")
@
\filledpagebreak
\subsubsection{Rgraphviz package}
<<>>=
library(Rgraphviz)
search()
<<>>=
sprofadjRag <- agopen(sprofadjNEL, name="Rprof Example")
<<fig=TRUE, label=s04adjvizdot, width=6, height=6>>=
#6 6
plotviz(sprofadjRag, main="sprof04: Graphviz dot layout")
@
%agopen(graph, name, nodes, edges, kind = NULL, layout = TRUE,
%layoutType = "dot",
%attrs = list(), nodeAttrs = list(), edgeAttrs = list(),
%subGList = list(), edgeMode = edgemode(graph),
%recipEdges=c("combined", "distinct"))

%dot, neato, twopi, circo, and fdp.
\filledpagebreak
<<fig=TRUE, label=s04adjvizneato,width=6, height=6>>=
#6
plotviz(sprofadjRag,"neato", main="sprof04: Graphviz neato layout")
@
\filledpagebreak
<<fig=TRUE, label=s04adjviztwopi,width=6, height=6>>=
#6
plotviz(sprofadjRag,"twopi", main="sprof04: Graphviz twopi layout")
@
\filledpagebreak
<<fig=TRUE, label=sprofadjvizcirco,width=6, height=6>>=
#6
plotviz(sprofadjRag,"circo", main="sprof04: Graphviz circo layout 6")
@
\filledpagebreak
<<fig=TRUE, label=s04adjvizfdp,width=6, height=6>>=
#6
plotviz(sprofadjRag,"fdp", main="sprof04: Graphviz fdp layout")
@
\index{Index01}
%:Sweave examples
%<<print=TRUE>>=
%<<results=hide>>=
%@
%<<echo=TRUE,print=TRUE>>=
%<<>>=
%@
%%\texttt{x} is 6.28318530717959, the
%<<engine=R>>=
%@ %def
%\begin{figure}[htbp]
%  \begin{center}
%<<fig=TRUE>>=
%@
%    \caption{.}
%  \end{center}
%\end{figure}
%<<engine=S4>>= L
%@
\bigskip%\cleardoublepage
\printindex

\clearpage
\R{} session info:
{\tiny
<<echo=FALSE,  print = FALSE, results = tex>>=
toLatex(sessionInfo())
@
}
%\RequirePackage{layouts}
\LaTeX{} information:
{\tiny
\currentpage textwidth: \printinunitsof{in}\prntlen{\textwidth} \qquad linewidth:\printinunitsof{in}\prntlen{\linewidth}\\
 textheight: \printinunitsof{in}\prntlen{\textheight}\\
}
@
Svn repository information:

{\tiny%
%	<<echo = FALSE, print = FALSE, results = tex>>= 
%	cat("Generated by Sweave from:\\\\")
%	cat(chartr("$", " ", "\\verb+$Source: /u/math/j40/cvsroot/lectures/src/insider/profile/Rnw/profile.Rnw,v $+\\\\"))
%	cat(chartr("$", " ", "\\verb+$Revision$+\\\\"))
%	cat(chartr("$", " ", "\\verb+$Date$+\\\\"))
%	cat(chartr("$", " ", "\\verb+$name:  $+\\\\"))
%	cat(chartr("$", " ", "\\verb+$Author$+\\\\"))
%	@
\noindent
\verb+$HeadURL$+\\
\verb+$Source: /u/math/j40/cvsroot/lectures/src/insider/profile/Rnw/profile.Rnw,v $+\\
\verb+$Id$+\\
\verb+$Revision$+\\
\verb+$Date$+\\
\verb+$name:  $+\\
\verb+$Author$+
}
\typeout{**** $Id$ done ****}
\filledpagebreak
\section{xxx  -- lost \& found}
<< label=tab:prSREinfo>>=
# xtable cannot handle posix, so we use print output here
#  str(profile_nodes_rle, max.level=2, vec.len=3, nchar.max=40, list.len=6)
strx(sprof01$info)
@

%As a convention, we do not re-arrange items for ad-hoc choices, but use a permutation 
%vector instead. 
%
%<<fig=TRUE, label= barplotNodes>>=
%rownames(sprof01$nodes) <- sprof01$nodes$names
%nodesperm <- order(sprof01$nodes$total.time,decreasing=TRUE)
%barplot(sprof01$nodes$total.time[nodesperm])
@
Selections are recorded as selection vectors, with reference to the original order.
This needs some caution to align them with the order choices.
<<fig=TRUE, label= barplotNodes4>>=
rownames(sprof01$nodes) <- sprof01$nodes$names
nodesperm <- order(sprof01$nodes$total.time,decreasing=TRUE)
nodesnrobsok <- sprof01$nodes$total.time > 4
sp <- sprof01$nodes$total.time[nodesperm][nodesnrobsok[nodesperm]]
names(sp) <- sprof01$nodes$name[nodesperm][nodesnrobsok[nodesperm]]
barplot(sp,
 main="Nodes, by total time", ylab="total time")
@
%<<fig=TRUE, label= barplotStacks>>=
%#rownames(sprof01$nodes) <- sprof01$nodes$names
%stacksperm <- order(sprof01$stacks$refcount,decreasing=TRUE)
%barplot(sprof01$stacks$refcount[stacksperm],main="Stacks, by reference count", ylab="count")

@
\filledpagebreak
On the first look, information on the profile level is not informative. Profile records are just recordings of some step, taken at regular intervals. We get a minimal information, if we encode the stacks in colour.
\todo{use stack colours}

@
We now do a step down analysis. Aggregating the information from the profiling events, we have the frequency of stack references. On the stack level, we encode the frequency in colour, and linking propagates this to the profile level.
<<fig=TRUE, label=sREplotstacks4col>>=
stackfreqscore <- rank(sprof01$stacks$refcount,ties.method="random")
stacksperm <- order(sprof01$stacks$refcount,decreasing=TRUE)
stacksnrobsok <- sprof01$stacks$refcount > 4
stackfreqscore4<- stackfreqscore[stacksperm][stacksnrobsok[stacksperm]]
barplot(sp[stacksnrobsok[stacksperm]], 
	main="Stacks, by reference count (4 obs. minimum)", ylab="count > 4",
	col=rainbow(80)[stackfreqscore4], sub=sprof01$info$id)
@
%<<>>=
%nodesnrobsok <- sprof01$nodes$total.time > 4
%sp1 <- as.matrix(sprof01$nodes$total.time)
%rownames(sp1) <- sprof01$nodes$name
%sp1 <-  as.matrix(sp1[nodesperm])
%rownames(sp1) <- sprof01$nodes$name[nodesperm]
%sp1 <- as.matrix(sp1[nodesnrobsok[nodesperm]])
%rownames(sp1)<- sprof01$nodes$name[nodesnrobsok[nodesperm]]
%barplot(t(sp1))
@
\filledpagebreak

<<print = FALSE, results = tex, label=tab:prSREnodes>>=
prxt(sprof01$nodes,
	caption="nodes", 
	label="tab:prSREnodes", 
	max.level=2, vec.len=3,nchar.max=40,
	digits=c(0,0,0,2,0,2,0))
@
%<<print = FALSE, results = tex, label=tab:prSREstacks>>=
%prxt(sprof01$stacks,
%	caption="stacks", 
%	label="tab:prSREstacks")
\filledpagebreak
<<label=tab:prSREstacks>>=
#str(sprof01$stacks,  max.level=2, vec.len=6,
#	nchar.max=40, list.len=20,width=70, strict.width="wrap"
strx(sprof01$stacks)
@
A summary is provided on request.
<<label=sumsprof01>>=
sumsprof01 <- summary.sprof(sprof01)
#str(profile_nodes_rle, max.level=2, vec.len=3, nchar.max=40, list.len=6)
strx(sumsprof01)
#str(sumsprof01, max.level=2, vec.len=3, 
#	nchar.max=40,  list.len=6,
#	width=70, strict.width="wrap")
@

The classical approach hides the work that has been done. Actually it breaks down the data 
to record items. This figure is not reported anywhere. In our case, it can be reconstructed. 
The profile data have 8456 words in 524 lines.

In our approach, we break down the information. Two lines of control information are split 
off. We have 522 lines of profile with 50 unique stacks, referencing 62 nodes. Instead of 
reducing it to a summary, we keep the full information. Information is always kept on its original level. 

On the profiles level, we know the sample interval length, and the id of the stack recorded. On the stack level, for  each stack we have a reference count, with the sample interval lengths used as weights. This reference count is added up for each node in the stack to give the node timings.

Cheap statistics are collected as the come by. For example, from the stacks table it is cheap to identify root and leaf nodes, and this mark is propagated to the nodes table.
@
These are some attempts to recover the factor structures.
<<>>=
xfi <- levels(sprof02$nodes$name)
profile_nodes_rlefac <- lapply(profile_nodes_rle, 
	function(xl) {xl$values <- factor(xl$values, 
		levels=1:62, 
		labels=xfi); xl}) # seems ok
profile_nodes_rletfac <- lapply(profile_nodes_rle, 
	function(x) table(x,dnn=c("run length","node")) ) #factors lost again
	colnames(profile_nodes_rletfac[[1]]) <- 
		sprof02$nodes$name[ as.integer(colnames(profile_nodes_rletfac[[1]]))] 

profile_nodes_rletfac1 <- lapply(profile_nodes_rletfac,
	function(xl) {colnames(xl) <- 
		sprof02$nodes$name[ as.integer(colnames(xl))];
	xl} )

invisible(lapply(profile_nodes_rletfac1, 
function(x) print.table(t(x),zero.print = ".") ))
@


\end{document}


