%!TEX root = /Users/gs/projects/rforge/sintro/pkg/sprof/work/vignettes/sprofiling.tex
% -*- mode: noweb; noweb-default-code-mode: R-mode; -*-
%

% options(width=72); setwd("/Users/gs/projects/rforge/sintro/pkg/sprof/work/vignettes/" )
% Sweave(file= "../../vignettes/sprofiling.Rnw", output="sprofiling.tex", keep.source=TRUE)
% debug=TRUE, eps=FALSE, pdf=TRUE, keep.source=TRUE
%
%global flags for conditional builds
%:flags
\def\private{true}% comment out for public version
\def\solutions{true}% comment out to hide solutions
\def\usehyperref{true}% comment out to skip hyperref

\documentclass[utf8]{amsart}
\usepackage[utf8]{inputenc}
%\usepackage[applemac]{inputenc}
\usepackage[english]{babel} %ngerman
%\usepackage[makeindex]{splitidx}
%\newindex[R functions by topic]{rtop}
%\newindex[R functions]{rfun}
\usepackage{fancyref}
\usepackage{cleveref}

\usepackage{gssda} %! add code, codearg, 
\usepackage{SIntro}
\usepackage{url} %! bubble up to gssda
\setkeys{Gin}{width=1.0\textwidth}

\setcounter{tocdepth}{3}

\newcommand{\R}{{\normalfont\textsf{R}}{}}
\newcommand\ircode[1]{\textsl{\texttt{#1}}}
\newcommand\ircodex[1]{\textsl{\texttt{#1}}\index{#1@\texttt{#1}|textit}}
%??2
\newcommand{\keyword}[2]{\index[rtop]{\ Topic{\large\ \textbf{#1}}!#2@\texttt{#2}}}
\newcommand\irfunx[2]{\keyword{#1}{#2}\ircode{#2()}\index[rfun]{#2@\texttt{#2}|textit}}% fun() & index, like \Link


%	\newcommand{\keyword}[2]{\sindex[rtop]{\ Topic{\large\ \textbf{#1}}!#2@\texttt{#2}}}
%	\newcommand\irfunx[2]{\keyword{#1}{#2}\ircode{#2()}\sindex[rfun]{#2@\texttt{#2}|textit}}% fun() & index, like \Link
%	\newcommand\ircodex[1]{\textsl{\texttt{#1}}\sindex{#1@\texttt{#1}|textit}}
% \newcommand\ircodex[1]{\textsl{\texttt{#1}}\sindex{#1@\texttt{#1}|textit}}

%??1
\newcommand\irarg[1]{\small{$\langle$\verb+#1+$\rangle$}}% should be 
%??3

\title{R profiling and optimisation}
\author{G\"unther Sawitzki}

\address{\noindent G\"unther Sawitzki\newline
\indent StatLab Heidelberg\newline
\indent Im Neuenheimer Feld 294\newline
\indent D 69120 Heidelberg\newline}%\\\bigskip\bigskip\bigskip\bigskip\bigskip \\ %
\thanks{\emph{An \R{} vignette for package sprof. }\ifx\private\undefined%
\typeout{ommitting private stuff ********}
\else
\emph{Private Version}\\
\fi
}
\email{gs@statlab.uni-heidelberg.de}
\urladdr{http://sintro.r-forge.r-project.org/}
\keywords{R programming, profiling, optimisation, R program language}

\date{
%June 1992, published as technical report \cite{gs92shrth}.\\
%For quotation, please use the general reference \cite{gs94oned}.\\
%Revised: August 2007\\
%Typeset, with minor revisions: \today}      % Activate to display a given date or no date
Typeset: \today}                                           % Activate to display a given date or no date

%\usepackage{gssda}
%\usepackage{gsSweave}%\usepackage{SIntro}%\usepackage{Sweave}
%\setkeys{Gin}{width=1.0\textwidth}
%:Sweave

\newcommand\Stt[1]{\textsl{\texttt{#1}}}

%\usepackage{a4wide}

\makeindex
\listfiles
\begin{document}
\maketitle
\tableofcontents
\section*{Profiling facilities in \R{}}
\R{} provides the basic instruments for profiling, both for time based samplers as for 
event based instrumentation. However this source of information seems to be rarely
used.

Maybe the supporting tools are not adequate. The summaries in \R{} itself reduce the 
information beyond necessity. The data structures in additional packages are not
sufficiently action oriented.

With package \ircode{sprof} we want to give a data representation that keeps the full
profile information. Tools to answer common questions are provided. The data structure 
should make it easy to extend the tools as required.

The package is currently distributed at r-forge as part of the \ircode{sintro} material.

\smallskip
To install this package directly within \R{} , type \\
 {\small   \ircode{install.packages("sprof",repos="http://r-forge.r-project.org")}}

\smallskip
To install the recent package from source directly within \R{} , type\\
    {\small   \ircode{install.packages("sprof",repos="http://r-forge.r-project.org",type="source")}}

\section*{\LaTeX{}  Layout Tools and Utilities}

%Tests for TeX
%
%*fref:
%
%\fref{subs:Rprof}
%
%\fref{tab:prSRREbs}
%
%*vref:
%
%subs: \vref{subs:Rprof}
%
%tab: \vref{tab:prSRREbs}
%
%*cref:
%
%subs: \cref{subs:Rprof}
%
%tab: \cref{tab:prSRREbs}

\smallskip
Print parameters used here:
<<>>=
options(width = 72)
options(digits = 6)

@
%This is just a hack to get a nicer output from args:
%<<>>=
%prargs <- function(x){ str(args(x))}
@
We use the \R{} function \ircode{xtable()} for output and \LaTeX \ \ircode{longtable}. A convenient wrapper to use this in out \ircode{Sweave} source is:
<<>>= 
library(xtable)
prxt <- function (x, digits=3, 	caption=NULL, 
	label=NULL, ...)  {
	print(
		xtable(x, digits=digits, caption=caption, label=label, ...), 
		floating=FALSE, tabular.environment="longtable")
	}
@
This is to be used with
\verb+<<print = FALSE, results = tex, label=tab:prxxxx>>=+

\section{Profiling}
The basic information provided by all profilers in is a protocol of sampled stacks. 
For each recorded event, the protocol has one record , such as a line with a text string showing the sampled  stack.

We use profiles to provide hints on the dynamic behaviour of programs. Most often, this is used to improve or even optimise programs. Sometimes, it is even used to understand some algorithm.

Profiles represent the program flow, which is considered to be laid out by the control structure of a program. The control structure is represented by the control graph, and this leads to the common approach to (re)construct the control graph, map the profile to this graph, and used graph based methods for further analysis. The prime example for this strategy is the GNU profiler \ircode{gprof} (see \url{http://sourceware.org/binutils/docs/gprof/}) which is used as master plan for many common profilers.

It is only half of the truth that the control graph can serve as a base for the profiled stacks. The fine issues will be discussed below. But for now, we stay with this simplification.

We take a different approach.  We take the stacks, as recorded in the profiles as our basic information unit.  From this, we ask: what are the actions we need to answer our questions?
Representation in graphs may come later, if they can help.

<<>>=
options(error = recover)
library(sprof)
@

In this presentation, we will use a small list of examples Since \ircode{Rprof} is not implemented on all systems, and since the profiles tend to get very large, we use some prepared examples that are frozen in this vignette and not included in the distribution, but all the code to generate the examples is provided.


\subsection{Simple regression example}
\label{subs:RegressionExpl}
\label{subs:Rprof}
<<label=RegressionExpl>>=
n <- 10000
x <- runif(n)
err <- rnorm(n)
y <- 2+ 3 * x + err
reg0data <- data.frame(x=x, y=y, err=err)
rm(x,y,err)

@
We will use this example to illustrate the basics. Of course the immediate questions are the variance between varying samples, and the influence of the sample size $n$. We keep everything fixed, so the only issue for now is the computational performance under strict iid conditions.

Still we have parameters to choose. We can determine the profiling granularity by setting the timing interval, and we can use repeated measurements to increase precision below the timing interval.

The timing interval should depend on the clock speed. Using for example 1ms amounts to some 1000 steps on a current CPU, per kernel.

If we use repeated samples, the usual rules of statistics applies. So taking $100$ runs and taking the mean reduces the standard deviation by a factor $1/10$.
%So with $simruns <- 100$, the mean 
%var mean = var n x / n^2

<<label=Rprof01>>=
profinterval <- 0.001
simruns <- 100

Rprof(filename="RprofsRegressionExpl.out", interval = profinterval)
for (i in 1:simruns) xxx<- summary(lm(y~x, data=reg0data))
Rprof(NULL)
@

We now have the profile data in a file \ircode{RprofsRegressionExpl.out}.
For this vignette, we use a frozen version\ircode{RprofsRegressionExpl01.out}.

The basic \R{} invites us to get a summary.

<<>>=
sumRprofRegressionExpl <- summaryRprof("RprofsRegressionExpl01.out")
str(sumRprofRegressionExpl, vec.len=3)
@

This summary reduces the information contained in the profile to marginal statistics per node.

The file contains several spurious recordings: nodes that have been recorded only few times. It is worth noting these, but then they better be discarded. We use a time limit of 4ms, which given our sampling interval of 1ms means we require more than four observations.
\filledpagebreak
<<print = FALSE, results = tex, label=tab:prSRREbs>>=
prxt(sumRprofRegressionExpl$by.self,
	caption="by.self as final stack entry, all records", 
	label="tab:prSRREbs")
@
\filledpagebreak
<<print = FALSE, results = tex, label=tab:prSRREbt>>=
prxt(sumRprofRegressionExpl$by.total[sumRprofRegressionExpl$by.total$total.time>0.004,],
	caption="by.total, total time > 0.004s", 
	label="tab:prSRREbt")
@

\filledpagebreak
In contrast, in our implementation we take a two step approach. First we read in the profile file to an internal representation. 

<<>>=
sprofRegressionExpl <- readRprof("RprofsRegressionExpl01.out")
str(sprofRegressionExpl, max.level=2, vec.len=3, nchar.max=40)
@
<< label=tab:prSREinfo>>=
# xtable cannot handle posix
str(sprofRegressionExpl$info,
	caption="info", 
	label="tab:prSREinfo")
@

We keep this example and use it extensively for illustration.
<<>>=
sprof01lm <- sprofRegressionExpl
save(sprof01lm, file="sprof01lm.RData")
@
As a convention, we do not re-arrange items for ad-hoc choices, but use a permutation 
vector instead. 

<<fig=TRUE, label= barplotNodes>>=
rownames(sprofRegressionExpl$nodes) <- sprofRegressionExpl$nodes$names
nodesperm <- order(sprofRegressionExpl$nodes$total.time,decreasing=TRUE)
barplot(sprofRegressionExpl$nodes$total.time[nodesperm])
@
Selections are recorded as selection vectors, with reference to the original order.
This needs some caution to align them with the order choices.
<<fig=TRUE, label= barplotNodes4>>=
nodesnrobsok <- sprofRegressionExpl$nodes$total.time > 4
sp <- sprofRegressionExpl$nodes$total.time[nodesperm][nodesnrobsok[nodesperm]]
names(sp) <- sprofRegressionExpl$nodes$name[nodesperm][nodesnrobsok[nodesperm]]
barplot(sp,
 main="Nodes, by total time", ylab="total time")
@
<<fig=TRUE, label= barplotStacks>>=
#rownames(sprofRegressionExpl$nodes) <- sprofRegressionExpl$nodes$names
stacksperm <- order(sprofRegressionExpl$stacks$refcount,decreasing=TRUE)
barplot(sprofRegressionExpl$stacks$refcount[stacksperm],main="Stacks, by reference count", ylab="count")

@
<<fig=TRUE, label= barplotStacks4>>=
stacksnrobsok <- sprofRegressionExpl$stacks$refcount > 4
sp4 <- sprofRegressionExpl$stacks$refcount[stacksperm][stacksnrobsok[stacksperm]]

names(sp4) <- sprofRegressionExpl$stacks$shortname[stacksperm][stacksnrobsok[stacksperm]]
barplot(sp4,
 main="Stacks, by reference count (4 obs. minimum)", ylab="count > 4")
@
On the first look, information on the profile level is not informative. Profile records are just recordings of some step, taken at regular intervals. We get a minimal information, if we encode the stacks in colour.
<<fig=TRUE, label=sREplotprofiles242, width=12, height=6>>=
par(mfrow=c(1,2))
plot_profiles(sprofRegressionExpl)
@
We now do a step down analysis. Agregating the information from the profilingn events, we have the frequency of stack references. On the stack level, we encode the frequncy in colour, and  linking propagates this to tne profile level.
<<fig=TRUE, label=sREplotstacks4col>>=
stackfreqscore <- rank(sprofRegressionExpl$stacks$refcount,ties.method="random")
stackfreqscore4<- stackfreqscore[stacksperm][stacksnrobsok[stacksperm]]
barplot(sp[stacksnrobsok[stacksperm]], main="Stacks, by reference count (4 obs. minimum)", ylab="count > 4",
col=rainbow(80)[stackfreqscore4])
@
<<fig=TRUE, label=sREplotprofiles4, width=12, height=6>>=
par(mfrow=c(1,2))
plot_profiles(sprofRegressionExpl)
@
%<<>>=
%nodesnrobsok <- sprofRegressionExpl$nodes$total.time > 4
%sp1 <- as.matrix(sprofRegressionExpl$nodes$total.time)
%rownames(sp1) <- sprofRegressionExpl$nodes$name
%sp1 <-  as.matrix(sp1[nodesperm])
%rownames(sp1) <- sprofRegressionExpl$nodes$name[nodesperm]
%sp1 <- as.matrix(sp1[nodesnrobsok[nodesperm]])
%rownames(sp1)<- sprofRegressionExpl$nodes$name[nodesnrobsok[nodesperm]]
%barplot(t(sp1))
@
\filledpagebreak

<<print = FALSE, results = tex, label=tab:prSREnodes>>=
prxt(sprofRegressionExpl$nodes,
	caption="nodes", 
	label="tab:prSREnodes")
@
%<<print = FALSE, results = tex, label=tab:prSREstacks>>=
%prxt(sprofRegressionExpl$stacks,
%	caption="stacks", 
%	label="tab:prSREstacks")
\filledpagebreak
<<label=tab:prSREstacks>>=
str(sprofRegressionExpl$stacks, max.level=1)

<<>>=
str(sprofRegressionExpl$profiles, max.level=1)

@
A summary is provided on request.
<<label=sumsprofRegressionExpl>>=
sumsprofRegressionExpl <- summary.sprof(sprofRegressionExpl)
str(sumsprofRegressionExpl, max.level=2)
@

The classical approach hides the work that has been done. Actually it breaks down the data to record items. This figure is not reported anywhere. In our case, it can be reconstructed. The profile data have 8456 words in 524 lines.

In our approach, we break down the information. Two lines of control information are split off. We have 522 lines of profile with 50 unique stacks, referencing 62 nodes. Instead of reducing it to a summary, we keep the full information. Information is always kept on its original level. 

On the profiles level, we know the sample interval length, and the id of the stack recorded. On the stack level, for  each stack we have a reference count, with the sample interval lengths used as weights. This reference count is added up for each node in the stack to give the node timings.

Cheap statistics are collected as the come by. For example, from the stacks table it is cheap to identify root and leaf nodes, and this mark is propagated to the nodes table.

\subsubsection{Plot}
Looking at lists of numbers is not too informative. We get a first impression by plotting the data. 

<<fig=TRUE, label=sREplotnodes, width=12, height=12>>=

#plot_nodes(sprofRegressionExpl, col=nodescol[nodescore])
par(mfrow=c(2,2))
plot_nodes(sprofRegressionExpl)
@
%<<fig=TRUE, label=sREplotnodes>>=
%
%nodescore <- 
% (sprofRegressionExpl$nodes$total.time * 
% sprofRegressionExpl$info$nrnodes) %/% max(sprofRegressionExpl$nodes$total.time)
%nodescol <- terrain.colors(sprofRegressionExpl$info$nrnodes)
%sprofRegressionExpl$nodes <- cbind(sprofRegressionExpl$nodes,nodescore,nodescol[nodescore])
%
%plot_nodes(sprofRegressionExpl, col=nodescol[nodescore])
<<fig=TRUE, label=sREplotstacks, width=12, height=6>>=
par(mfrow=c(1,2))
plot_stacks(sprofRegressionExpl)
<<>>=
stacks_nodes <- list.as.matrix(sprofRegressionExpl$stacks$nodes)
<<fig=TRUE, label=sREimgstacks>>=
image(x=1:ncol(stacks_nodes),y=1:nrow(stacks_nodes), 
t(stacks_nodes),xlab="stack", ylab="depth", main="nodes by stack")

<<fig=TRUE, label=sREplotprofiles323, width=12, height=6>>=
par(mfrow=c(1,2))
plot_profiles(sprofRegressionExpl)

@
<<>>=
profile_nodes <- profiles_matrix(sprofRegressionExpl)
<<fig=TRUE, label=sREimgprofiles>>=
image(x=1:ncol(profile_nodes),y=1:nrow(profile_nodes), 
t(profile_nodes),xlab="event", ylab="depth", main="nodes by event")
@
The \irfunx{misc}{plot} method for \ircode{sprof} objects concatenates these three functions.
\subsection{analysis}
<<>>=
profile_nodes_rrle <- rrle(profile_nodes)
str(profile_nodes_rrle)
@
\subsection{trimming}

<<>>=
trimstacks <- function(sprof, level){
lapply(sprof$stacks$nodes, function(x) {x[-(1:level)]})
}
@
%<<fig=TRUE, label=sREimgprofilesTr>>=
<<label=sREimgprofilesTr>>=
sprofRegressionExplTr <- trimstacks(sprofRegressionExpl, 11)
#profile_nodesTr <- profiles_matrix(sprofRegressionExplTr)
#image(x=1:ncol(profile_nodesTr),y=1:nrow(profile_nodesTr), t(profile_nodesTr),xlab="event", ylab="depth", main="nodes by event")


<<>>=
nodefreq <- rep(0,length(sprofRegressionExpl$nodes$name))
for (i in (1:length(sprofRegressionExpl$stacks$nodes))){
	nodefreq <- nodefreq +   
		table( factor(sprofRegressionExpl$stacks$nodes[[i]], 
			levels <- 1:length(sprofRegressionExpl$nodes$name) , 
			ordered=FALSE))
	}
names(nodefreq) <- sprofRegressionExpl$nodes$name
@
Top frequent nodes.
<<fig=TRUE, label=sREplotnodefreq>>=
ndf <- nodefreq[nodefreq>1]
ondf <- order(ndf,decreasing=TRUE)
barplot(ndf[ondf])
<<fig=TRUE, label=sREplotnodefreq1>>=
barplot(ndf[ondf], col=rainbow(length(ondf)))
@ 
Top frequent stacks.
<<fig=TRUE, label=sREplotstackfreq>>=
x <- sprofRegressionExpl
xsrc <- as.matrix(x$stacks$refcount)
rownames(xsrc) <- rownames(xsrc, do.NULL=FALSE, prefix="S")
#stf <- x$stacks$refcount[x$stacks$refcount>1]
#names(stf) <-  x$stacks$shortname[x$stacks$refcount>1]
stf <- xsrc[xsrc>1]
names(stf) <- rownames(xsrc)[xsrc>1]
ostf <- order(stf,decreasing=TRUE)
barplot(stf[ostf])
<<fig=TRUE, label=sREplotstackfreq1>>=
barplot(stf[ostf], col=terrain.colors(length(ostf)), horiz=TRUE)
<<fig=TRUE, label=sREplotstackfreq2>>=
barplot(stf[ostf], col=terrain.colors(length(ostf)))
@
There is no statistics on profiles. Profiling are our elementary data.
However we can lnk to our derived data to get a more informative display.
For example, going one step back we can encode stacks and use these colour codes in the display of a profile.

Or going two steps back, we can encode nodes in colour, giving coloured stacks, and use these in the display of profile data.


@
\section{Example data}
<<>>=
getwd()
dir()
@
\section{A better grip on profile information}
\label{sec:sprof}

The basic information provided by all profilers in \R{} is a protocol of sampled stacks. 
For each recorded event, the protocol records one line with a text string showing the sampled  stack 
(in reverse order: most recent first). The stack lines may be preceded by header lines with event 
specific information. The protocol may be interspersed with control information, such as information about the timing interval used. 
%Examples of the protocol format used by the common profilers in in \ref{sec:formats} on page \pageref{sec:formats}.

We know that the structural information, static information as well as dynamic information, can be represented with the
help of a graph. For a static analysis, the graph representation may be the first choice. For a dynamic analysis, the stack information is our first information. A stack is a connected path in the program graph. If we start with nodes and edges, 
we loose information which is readily available in record of stacks.

As we know that we are working with stacks, we know that they have their peculiarities. Stacks tend to grow and shrink. Subsequent events will have extensions and shrinkages of stacks (if the recording is on a fine scale), or stack sharing
common stumps (if the recording is on a coarser scale).


There have  always been interrupts, and these show up in profiles. In \R{}, this is related 
problem  (GC)

The graph is a second instance that is (re)constructed from the stack recording.

Here is the way we represent the profile information:

The profile log file is sanitised:
\begin{itemize}
\item{Control lines are extracted and recorded in a separate list.}
\item{Head parts, if present, ere extracted and recorded in a matrix that is kept line-aligned with the remainder}
\item{Line content is standardised, for example by removing stray quotation marks etc.}
\end{itemize}

After this, the sanitised lines are encoded as a vector of  stacks, and references to this.

If necessary,  these steps are done by chunks to reduce memory load.

From the vector of stacks, a vector of nodes (or rather node names) is derived.

The stacks are now encoded by references to the nodes table.
For convenience, we keep the (sanitised) textual representation of the stacks.

So far, texts are in reverse order. For each stack, we record the trailing leaf, and then we reverse order. 
The top of stack is now on first position.

Several statistics can be accumulated easily as a side effect.

Conceptually, the data structure consist of three tables (the implementation may differ, and is subject to change).

The profiles table is the representation of the input file. Control lines are are collected in a special table. With the control lines removed, the rest is a table, one row per input line. The body of the line, the stack, is encoded as a reference to a stacks table (obligatory) and header information (optional).

The stacks table contains the collected stacks, each stack encoded as a list of references to the node table. This is obligatory. This list is kept in reverse order (root at position 1). A source line representing the stack information may be kept (optional).

The nodes table keeps the names at the nodes.

To illustrate our data structure, we use \ircode{Rprofsr01.out} as provided in section \ref{subs:Rprof} on page \pageref{subs:Rprof}.


vref:

\vref{subs:Rprof}





This is a temporary hack  to get a most recent private recent version of \ircode{library(sprof)}.
<<label=sourcesprof>>=
@
%	source('~/projects/rforge/sintro/pkg/sprof/R/readRprof.R', chdir = TRUE)
%	source('~/projects/rforge/sintro/pkg/sprof/R/rrle.R', chdir = TRUE)
%	source('~/projects/rforge/sintro/pkg/sprof/R/sampleRprof.R', chdir = TRUE)
%	source('~/projects/rforge/sintro/pkg/sprof/R/summary.sprof.R', chdir = TRUE)
%	source('~/projects/rforge/sintro/pkg/sprof/R/print.sprof.R', chdir = TRUE)
%	source('~/projects/rforge/sintro/pkg/sprof/R/plot.sprof.R', chdir = TRUE)
%	# file.edit('~/projects/rforge/sintro/pkg/sprof/R/summary_prof.R')
<<label=rdRprofsr01>>=
rpo <- readRprof("Rprofsr01.out")
str_prof(rpo)
@

\section{Standard output}
\subsection{Summary}
<<label=rposumnodes>>=
summary_nodes(rpo)
<<label=rposumstacks>>=
summary_stacks(rpo)
<<label=rposumprofiles>>=
summary_profiles(rpo)
@
The \irfunx{misc}{summary} method for \ircode{sprof} objects concatenates these three functions.

\subsection{Print}
<<label=rpoprintnodes>>=
print_nodes(rpo)
<<label=rpoprintstacks>>=
print_stacks(rpo)
<<label=rpoprintprofiles>>=
print_profiles(rpo)
@
The \irfunx{misc}{print} method for \ircode{sprof} objects concatenates these three functions.

\subsection{Plot}
<<fig=TRUE, label=rpoplotnodes>>=
plot_nodes(rpo)
<<fig=TRUE, label=rpoplotstacks>>=
plot_stacks(rpo)
<<fig=TRUE, label=rpoplotprofiles>>=
plot_profiles(rpo)
@
The \irfunx{misc}{plot} method for \ircode{sprof} objects concatenates these three functions.

\subsection{Graph}

To interface \ircode{sprof} to a graph handling package,  \irfunx{adjacency}{until} can extract the adjacency matrix from the profile.

<<>>=
rpoadj <- adjacency(rpo)
@
This is  a format any graph package can handle.
@
\filledpagebreak
\subsubsection{graph Package}
<<>>=
library(graph)
rpoadjNEL <- as(rpoadj,"graphNEL")
<<fig=TRUE, label=rpoadjNEL, width=24, height=24>>=
plot(rpoadjNEL,  main="graph layout", cex.main=5)
#detach("package:graph")
@
\filledpagebreak
\subsubsection{igraph Package}
<<>>=
library(igraph)
rpoig <- graph.adjacency(rpoadj)
<<fig=TRUE, label=rpoig, width=24, height=24>>=
#plot(rpoig, main="igraph layout", cex.main=5)
plot(rpoig, main="igraph layout")

detach("package:igraph")
@
\filledpagebreak
\subsubsection{network Package}
<<fig=TRUE, label=nwrpoadj, width=24, height=24>>=
library(network)
nwrpoadj <- as.network(rpoadj) # names is not imported 
network.vertex.names(nwrpoadj) <- rownames(rpoadj) # not honoured by plot
plot(nwrpoadj, label=rownames(rpoadj), main="network layout", cex.main=5)
#plot(nwrpoadj, label=rownames(rpoadj), edge.lwd=rpoadj)
detach("package:network")
@
\filledpagebreak
\subsubsection{Rgraphviz Package}
<<>>=
library(Rgraphviz)
rpoadjRag <- agopen(rpoadjNEL, name="Rprof Example")
<<fig=TRUE, label=rpoadjvizdot, width=24, height=24>>=
plot(rpoadjRag, main="Graphviz dot layout", cex.main=5)
@
%agopen(graph, name, nodes, edges, kind = NULL, layout = TRUE,
%layoutType = "dot",
%attrs = list(), nodeAttrs = list(), edgeAttrs = list(),
%subGList = list(), edgeMode = edgemode(graph),
%recipEdges=c("combined", "distinct"))

%dot, neato, twopi, circo, and fdp.
\filledpagebreak
<<fig=TRUE, label=rpoadjvizneato, width=24, height=24>>=
plot(rpoadjRag,"neato", main="Graphviz neto layout", cex.main=5)
@
\filledpagebreak
<<fig=TRUE, label=rpoadjviztwopi, width=24, height=24>>=
plot(rpoadjRag,"twopi", main="Graphviz twopi layout", cex.main=5)
@
\filledpagebreak
<<fig=TRUE, label=rpoadjvizcirco, width=24, height=24>>=
plot(rpoadjRag,"circo", main="Graphviz circo layout", cex.main=5)
@
\filledpagebreak
<<fig=TRUE, label=rpoadjvizfdp, width=24, height=24>>=
plot(rpoadjRag,"fdp", main="Graphviz fdp layout", cex.main=5)

@
\index{Index01}
%:Sweave examples
%<<print=TRUE>>=
%<<results=hide>>=
%@
%<<echo=TRUE,print=TRUE>>=
%<<>>=
%@
%%\texttt{x} is 6.28318530717959, the
%<<engine=R>>=
%@ %def
%\begin{figure}[htbp]
%  \begin{center}
%<<fig=TRUE>>=
%@
%    \caption{.}
%  \end{center}
%\end{figure}
%<<engine=S4>>=
%@
\bigskip%\cleardoublepage
\printindex
\bigskip
\R{} session info:

<<echo=FALSE,  print = FALSE, results = tex>>=
toLatex(sessionInfo())
@
svn repository info:

{\tiny%
%	<<echo = FALSE, print = FALSE, results = tex>>= 
%	cat("Generated by Sweave from:\\\\")
%	cat(chartr("$", " ", "\\verb+$Source: /u/math/j40/cvsroot/lectures/src/insider/profile/Rnw/profile.Rnw,v $+\\\\"))
%	cat(chartr("$", " ", "\\verb+$Revision: 1.1 $+\\\\"))
%	cat(chartr("$", " ", "\\verb+$Date: 2013/05/20 20:24:04 $+\\\\"))
%	cat(chartr("$", " ", "\\verb+$name:  $+\\\\"))
%	cat(chartr("$", " ", "\\verb+$Author: j40 $+\\\\"))
%	@
\noindent
\verb+$Source: /u/math/j40/cvsroot/lectures/src/insider/profile/Rnw/profile.Rnw,v $+\\
\verb+$Revision: 1.1 $+\\
\verb+$Date: 2013/05/20 20:24:04 $+\\
\verb+$name:  $+\\
\verb+$Author: j40 $+
}
\typeout{**** $Id: profile.Rnw,v 1.1 2013/05/20 20:24:04 j40 Exp $ done ****}
\end{document}


